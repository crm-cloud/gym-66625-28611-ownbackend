// backend/prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"] // Keep both listed for context
}

generator client {
  provider = "prisma-client-js"
}

// ENUM Types (Consolidated and corrected based on SQL files)
enum assignment_status {
  scheduled
  in_progress
  completed
  cancelled
  no_show

  @@schema("public")
}

enum attendance_status {
  checked_in @map("checked-in")
  checked_out @map("checked-out")
  no_show @map("no-show") // Assuming DB uses hyphen based on @map
  late

  @@schema("public")
}

enum bonus_type {
  referral_signup
  referral_membership
  loyalty_points

  @@schema("public")
}

enum device_status {
  online
  offline
  maintenance

  @@schema("public")
}

enum class_difficulty {
  beginner
  intermediate
  advanced
  all_levels @map("all_levels")

  @@schema("public")
}

enum discount_type {
  percentage
  fixed_amount @map("fixed_amount")

  @@schema("public")
}

enum email_template_type {
  welcome
  payment_reminder @map("payment_reminder")
  class_booking @map("class_booking")
  promotion
  password_reset @map("password_reset")
  custom

  @@schema("public")
}

enum equipment_status {
  operational
  maintenance
  out_of_order @map("out_of_order")

  @@schema("public")
}

enum feedback_category {
  general
  class
  trainer
  facility
  billing

  @@schema("public")
}

enum feedback_status {
  new
  in_review @map("in_review")
  resolved
  closed

  @@schema("public")
}

enum class_recurrence {
  none
  daily
  weekly
  bi_weekly @map("bi_weekly")
  monthly

  @@schema("public")
}

enum invoice_status {
  draft
  sent
  paid
  overdue
  cancelled

  @@schema("public")
}

enum lead_priority {
  low
  medium
  high

  @@schema("public")
}

enum lead_status {
  new
  contacted
  qualified
  proposal_sent @map("proposal_sent")
  converted
  lost

  @@schema("public")
}

enum locker_status {
  available
  occupied
  maintenance

  @@schema("public")
}

enum membership_status {
  active
  inactive
  frozen
  expired
  cancelled

  @@schema("public")
}

enum freeze_status {
  pending
  approved
  rejected

  @@schema("public")
}

enum plan_duration_unit {
  days
  weeks
  months
  years

  @@schema("public")
}

enum order_status {
  pending
  processing
  completed
  cancelled
  refunded

  @@schema("public")
}

enum payment_gateway_provider {
  stripe
  razorpay
  paypal
  manual
  payu
  phonepe
  ccavenue

  @@schema("public")
}

// Consolidated Payment/Transaction Status
enum payment_transaction_status {
  pending
  success
  failed
  refunded
  processing
  completed
  cancelled
  paid

  @@schema("public")
}

enum permission_category {
  member_management @map("member_management")
  finance
  scheduling
  reporting
  settings
  staff

  @@schema("public")
}

enum user_role {
  member
  trainer
  staff
  manager
  admin
  super_admin @map("super_admin")

  @@schema("public")
}

enum plan_status {
  active
  inactive
  archived

  @@schema("public")
}

enum referral_bonus_type {
  credit
  discount
  free_month @map("free_month")

  @@schema("public")
}

enum role_scope {
  global
  branch
  gym

  @@schema("public")
}

enum sms_template_type {
  reminder
  notification
  promotion
  otp

  @@schema("public")
}

enum backup_type {
  full
  incremental
  schema

  @@schema("public")
}

enum backup_status {
  pending
  in_progress @map("in_progress")
  completed
  failed

  @@schema("public")
}

enum event_category {
  system
  user
  billing
  security

  @@schema("public")
}

enum event_type {
  login
  update
  create
  delete
  payment

  @@schema("public")
}

enum severity_level {
  info
  warning
  error
  critical

  @@schema("public")
}

enum team_member_status {
  active
  inactive
  on_leave @map("on_leave")

  @@schema("public")
}

enum session_type {
  personal_training @map("personal_training")
  group_class @map("group_class")
  consultation
  single
  package

  @@schema("public")
}

enum certification_level {
  basic
  intermediate
  advanced
  expert

  @@schema("public")
}

enum trainer_change_reason {
  scheduling_conflict @map("scheduling_conflict")
  personality_mismatch @map("personality_mismatch")
  specialty_change @map("specialty_change")
  performance_issue @map("performance_issue")
  other

  @@schema("public")
}

enum trainer_change_status {
  pending
  approved
  rejected
  completed

  @@schema("public")
}

enum trainer_change_urgency {
  low
  medium
  high

  @@schema("public")
}

enum package_status {
  active
  expired
  cancelled
  completed

  @@schema("public")
}

enum trainer_status {
  active
  inactive
  on_leave @map("on_leave")
  busy

  @@schema("public")
}

enum utilization_period {
  daily
  weekly
  monthly

  @@schema("public")
}

// Consolidated Transaction Type
enum transaction_kind {
  income
  expense
  package_purchase
  single_session
  refund

  @@schema("public")
}

enum notification_type {
  system
  message
  reminder
  achievement
  payment_success @map("payment_success")
  payment_failed @map("payment_failed")
  payment_reminder @map("payment_reminder")
  receipt_ready @map("receipt_ready")

  @@schema("public")
}

enum whatsapp_template_category {
  marketing
  utility
  authentication

  @@schema("public")
}

enum whatsapp_template_status {
  pending
  approved
  rejected

  @@schema("public")
}

enum whatsapp_template_type {
  text
  media
  interactive

  @@schema("public")
}

// Added Enums from database-schema.sql
enum payment_gateway_type {
  razorpay
  payu
  phonepe
  ccavenue

  @@schema("public")
}

enum payment_gateway_environment {
  sandbox
  live

  @@schema("public")
}

enum payment_type {
  membership
  pos
  invoice
  training_fee @map("training_fee")

  @@schema("public")
}

enum payment_method {
  card
  upi
  netbanking
  wallet
  cash
  bank_transfer @map("bank_transfer")

  @@schema("public")
}

enum payment_log_type {
  webhook
  api_call @map("api_call")
  callback
  error

  @@schema("public")
}

enum payment_processing_status {
  received
  processed
  failed

  @@schema("public")
}

enum email_log_type {
  payment_success @map("payment_success")
  payment_failed @map("payment_failed")
  payment_link @map("payment_link")
  invoice

  @@schema("public")
}

enum delivery_status {
  queued
  sent
  delivered
  failed
  bounced

  @@schema("public")
}

enum sms_log_type {
  payment_success @map("payment_success")
  payment_failed @map("payment_failed")
  payment_link @map("payment_link")
  reminder

  @@schema("public")
}

enum trainer_assignment_assigned_by {
  auto
  manual
  member_request @map("member_request")

  @@schema("public")
}

enum member_trainer_preferences_gender {
  male
  female

  @@schema("public")
}

enum member_trainer_preferences_experience_level {
  any
  beginner_friendly @map("beginner_friendly")
  experienced
  expert

  @@schema("public")
}

// Models (Consolidated and Corrected)

model achievements {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.Text
  description         String                @db.Text
  category            String                @db.Text
  icon_url            String?               @db.Text
  criteria            Json                  @db.JsonB
  points_value        Int?                  @default(0)
  rarity              String?               @default("common") @db.Text
  is_active           Boolean?              @default(true)
  created_at          DateTime?             @default(now()) @db.Timestamptz()
  member_achievements member_achievements[]

  @@map("achievements")
  @@schema("public")
}

model ai_insights {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String?   @db.Uuid
  branch_id           String?   @db.Uuid
  insight_type        String    @db.Text
  title               String    @db.Text
  description         String    @db.Text
  confidence_score    Decimal?  @db.Decimal
  data_sources        String[]  @db.Text
  recommendation_data Json?     @db.JsonB
  is_applied          Boolean?  @default(false)
  applied_at          DateTime? @db.Timestamptz()
  effectiveness_score Decimal?  @db.Decimal
  expires_at          DateTime? @db.Timestamptz()
  created_at          DateTime? @default(now()) @db.Timestamptz()
  profiles            profiles? @relation(fields: [user_id], references: [user_id])
  branches            branches? @relation(fields: [branch_id], references: [id])

  @@map("ai_insights")
  @@schema("public")
}

model analytics_events {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id     String?   @db.Text
  user_id        String?   @db.Uuid
  branch_id      String?   @db.Uuid
  event_category String    @db.Text
  event_name     String    @db.Text
  properties     Json?     @default("{}") @db.JsonB
  created_at     DateTime? @default(now()) @db.Timestamptz()
  profiles       profiles? @relation(fields: [user_id], references: [user_id])
  branches       branches? @relation(fields: [branch_id], references: [id])

  @@map("analytics_events")
  @@schema("public")
}

model announcements {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String    @db.Text
  content      String    @db.Text
  created_by   String?   @db.Uuid // Points to profiles.user_id now
  branch_ids   String[]  @db.Uuid
  target_roles String[]  @default([]) @db.Text
  publish_date DateTime  @db.Timestamptz()
  expiry_date  DateTime? @db.Timestamptz()
  is_active    Boolean?  @default(true)
  created_at   DateTime? @default(now()) @db.Timestamptz()
  creator      profiles? @relation(fields: [created_by], references: [user_id])

  @@map("announcements")
  @@schema("public")
}

model attendance_records {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String            @db.Uuid
  branch_id        String            @db.Uuid
  check_in_time    DateTime          @db.Timestamptz()
  check_out_time   DateTime?         @db.Timestamptz()
  duration_minutes Int?
  status           attendance_status? @default(checked_in)
  attendance_type  String?           @default("gym_access") @db.Text
  class_id         String?           @db.Uuid
  notes            String?           @db.Text
  profiles         profiles          @relation(fields: [user_id], references: [user_id])
  branches         branches          @relation(fields: [branch_id], references: [id])
  gym_classes      gym_classes?      @relation(fields: [class_id], references: [id])

  @@map("attendance_records")
  @@schema("public")
}

model biometric_devices {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id     String         @db.Uuid
  name          String         @db.Text
  ip_address    String?        @db.Text
  serial_number String?        @unique @db.Text
  status        device_status? @default(offline)
  last_sync     DateTime?      @db.Timestamptz()
  installed_at  DateTime?      @db.Date
  created_at    DateTime?      @default(now()) @db.Timestamptz()
  branches      branches       @relation(fields: [branch_id], references: [id])

  @@map("biometric_devices")
  @@schema("public")
}

model branch_analytics {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id        String    @unique @db.Uuid
  date             DateTime  @db.Date
  total_members    Int?      @default(0)
  active_members   Int?      @default(0)
  new_signups      Int?      @default(0)
  check_ins        Int?      @default(0)
  revenue          Decimal?  @default(0.00) @db.Decimal(12, 2)
  expenses         Decimal?  @default(0.00) @db.Decimal(12, 2)
  class_attendance Int?      @default(0)
  updated_at       DateTime? @default(now()) @db.Timestamptz()
  branches         branches  @relation(fields: [branch_id], references: [id])

  @@unique([branch_id, date])
  @@map("branch_analytics")
  @@schema("public")
}

model branches {
  id                    String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                      @db.VarChar(255)
  address               String?                     @db.Text
  city                  String?                     @db.VarChar(100)
  state                 String?                     @db.VarChar(100)
  country               String?                     @db.VarChar(100)
  postal_code           String?                     @db.VarChar(20)
  phone                 String?                     @db.VarChar(20)
  email                 String?                     @db.VarChar(255)
  operating_hours       Json?                       @db.JsonB
  is_active             Boolean?                    @default(true)
  timezone              String?                     @default("UTC") @db.VarChar(50)
  created_at            DateTime?                   @default(now()) @db.Timestamptz()
  updated_at            DateTime?                   @default(now()) @db.Timestamptz() @updatedAt
  gym_id                String?                     @db.Uuid
  manager_id            String?                     @db.Uuid
  max_capacity          Int?                        @default(100)
  current_occupancy     Int?                        @default(0)
  membership_plans      membership_plans[]
  gym_classes           gym_classes[]
  team_members          team_members[]
  lockers               lockers[]
  equipment             equipment[]
  email_templates       email_templates[]
  sms_templates         sms_templates[]
  whatsapp_templates    whatsapp_templates[]
  transaction_categories transaction_categories[]
  products              products[]
  dashboard_metrics     dashboard_metrics[]
  auto_assignment_config auto_assignment_config?
  
  // Relations to other models
  payment_gateway_configs payment_gateway_configs[]
  payment_gateway_transactions payment_gateway_transactions[]
  profiles_profiles profiles[]
  referral_settings referral_settings[]
  system_settings system_settings[]
  trainer_package_rates trainer_package_rates[]
  trainer_profiles trainer_profiles[]
  transactions transactions[]
  user_roles user_roles[]
  work_shifts work_shifts[]
  workout_plans workout_plans[]
  notification_logs notification_logs[]
  biometric_devices biometric_devices[]
  branch_analytics branch_analytics[]
  diet_plans diet_plans[]
  discount_codes discount_codes[]
  feedback feedback[]
  gyms gyms[]
  invoices invoices[]
  leads leads[]
  members members[]
  orders orders[]
  ai_insights ai_insights[]
  analytics_events analytics_events[]
  attendance_records attendance_records[]

  @@map("branches")
  @@schema("public")
}

model class_enrollments {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  class_id        String    @db.Uuid
  member_id       String    @db.Uuid
  enrollment_date DateTime? @default(now()) @db.Timestamptz()
  status          String?   @default("enrolled") @db.Text
  attended_at     DateTime? @db.Timestamptz()
  gym_classes     gym_classes @relation(fields: [class_id], references: [id])
  members         members     @relation(fields: [member_id], references: [id])

  @@unique([class_id, member_id])
  @@map("class_enrollments")
  @@schema("public")
}

model credit_transactions {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String                 @db.Uuid
  transaction_type       String                 @db.Text
  amount                 Int
  description            String?                @db.Text
  related_order_id       String?                @db.Uuid
  related_bonus_id       String?                @db.Uuid
  created_at             DateTime?              @default(now()) @db.Timestamptz()
  profiles               profiles               @relation(fields: [user_id], references: [user_id])
  orders                 orders?                @relation(fields: [related_order_id], references: [id])
  referral_bonus_history referral_bonus_history? @relation(fields: [related_bonus_id], references: [id])

  @@map("credit_transactions")
  @@schema("public")
}

model dashboard_metrics {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id    String?   @db.Uuid
  metric_name  String    @db.Text
  metric_value Decimal   @db.Decimal
  metric_unit  String?   @db.Text
  period       String    @db.Text
  date         DateTime  @db.Date
  updated_at   DateTime? @default(now()) @db.Timestamptz()
  branches     branches? @relation(fields: [branch_id], references: [id])

  @@unique([branch_id, metric_name, period, date])
  @@map("dashboard_metrics")
  @@schema("public")
}

model diet_plans {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_by        String?             @db.Uuid
  branch_id         String?             @db.Uuid
  name              String              @db.Text
  description       String?             @db.Text
  goal              String?             @db.Text
  plan_details      Json?               @db.JsonB
  status            plan_status?        @default(active)
  created_at        DateTime?           @default(now()) @db.Timestamptz()
  updated_at        DateTime?           @default(now()) @db.Timestamptz()
  profiles          profiles?           @relation(fields: [created_by], references: [user_id])
  branches          branches?           @relation(fields: [branch_id], references: [id])
  member_diet_plans member_diet_plans[]

  @@map("diet_plans")
  @@schema("public")
}

model discount_codes {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id             String?                 @db.Uuid
  code                  String                  @unique @db.Text
  discount_type         discount_type
  value                 Decimal                 @db.Decimal(10, 2)
  max_uses              Int?
  uses_count            Int?                    @default(0)
  start_date            DateTime?               @db.Timestamptz()
  end_date              DateTime?               @db.Timestamptz()
  is_active             Boolean?                @default(true)
  applicable_to         String[]                @default([]) @db.Text
  created_at            DateTime?               @default(now()) @db.Timestamptz()
  branches              branches?               @relation(fields: [branch_id], references: [id])
  member_discount_usage member_discount_usage[]

  @@map("discount_codes")
  @@schema("public")
}

model email_templates {
  id         String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id  String?             @db.Uuid
  type       email_template_type
  name       String              @db.Text
  subject    String              @db.Text
  body_html  String              @db.Text
  variables  Json?               @db.JsonB
  is_active  Boolean?            @default(true)
  created_by String?             @db.Uuid // Points to profiles.user_id
  created_at DateTime?           @default(now()) @db.Timestamptz()
  updated_at DateTime?           @default(now()) @db.Timestamptz()
  branches   branches?           @relation(fields: [branch_id], references: [id])
  creator    profiles?           @relation("creator", fields: [created_by], references: [user_id])

  @@unique([branch_id, type, name])
  @@map("email_templates")
  @@schema("public")
}

model equipment {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id             String                 @db.Uuid
  name                  String                 @db.Text
  type                  String?                @db.Text
  manufacturer          String?                @db.Text
  model                 String?                @db.Text
  serial_number         String?                @unique @db.Text
  purchase_date         DateTime?              @db.Date
  warranty_expiry_date  DateTime?              @db.Date
  status                equipment_status?      @default(operational)
  last_maintenance_date DateTime?              @db.Date
  next_maintenance_date DateTime?              @db.Date
  location              String?                @db.Text
  created_at            DateTime?              @default(now()) @db.Timestamptz()
  branches              branches               @relation(fields: [branch_id], references: [id])
  equipment_analytics   equipment_analytics[]
  maintenance_records   maintenance_records[]

  @@map("equipment")
  @@schema("public")
}

model equipment_analytics {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  equipment_id     String    @db.Uuid
  date             DateTime  @db.Date
  usage_hours      Decimal?  @default(0.00) @db.Decimal(6, 2)
  downtime_hours   Decimal?  @default(0.00) @db.Decimal(6, 2)
  maintenance_cost Decimal?  @default(0.00) @db.Decimal(10, 2)
  updated_at       DateTime? @default(now()) @db.Timestamptz()
  equipment        equipment @relation(fields: [equipment_id], references: [id])

  @@unique([equipment_id, date])
  @@map("equipment_analytics")
  @@schema("public")
}

model feedback {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  member_id          String             @db.Uuid
  branch_id          String             @db.Uuid
  category           feedback_category
  rating             Int?
  comments           String?            @db.Text
  submitted_at       DateTime?          @default(now()) @db.Timestamptz()
  status             feedback_status?   @default(new)
  resolved_at        DateTime?          @db.Timestamptz()
  tags               String[]           @db.Text
  members            members            @relation(fields: [member_id], references: [id])
  branches           branches           @relation(fields: [branch_id], references: [id])
  feedback_responses feedback_responses[]

  @@map("feedback")
  @@schema("public")
}

model feedback_responses {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feedback_id   String    @db.Uuid
  responded_by  String    @db.Uuid
  response_text String    @db.Text
  responded_at  DateTime? @default(now()) @db.Timestamptz()
  feedback      feedback  @relation(fields: [feedback_id], references: [id])
  profiles      profiles  @relation(fields: [responded_by], references: [user_id])

  @@map("feedback_responses")
  @@schema("public")
}

model gym_classes {
  id                  String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id           String             @db.Uuid
  trainer_id          String?            @db.Uuid
  name                String             @db.Text
  description         String?            @db.Text
  difficulty          class_difficulty
  start_time          DateTime           @db.Timestamptz()
  duration_minutes    Int
  capacity            Int?
  enrolled_count      Int?               @default(0)
  status              String?            @default("scheduled") @db.Text
  recurrence          class_recurrence?  @default(none)
  recurrence_end_date DateTime?          @db.Timestamptz()
  created_at          DateTime?          @default(now()) @db.Timestamptz()
  branches            branches           @relation(fields: [branch_id], references: [id])
  trainer_profiles    trainer_profiles?  @relation(fields: [trainer_id], references: [id])
  attendance_records  attendance_records[]
  class_enrollments   class_enrollments[]

  @@map("gym_classes")
  @@schema("public")
}

model gym_usage {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gym_id                   String    @db.Uuid
  month                    Int
  year                     Int
  total_checkins           Int?      @default(0)
  peak_usage_hours         String[]  @db.Text
  average_duration_minutes Decimal?  @default(0.00) @db.Decimal(6, 2)
  updated_at               DateTime? @default(now()) @db.Timestamptz()
  gyms                     gyms      @relation(fields: [gym_id], references: [id])

  @@unique([gym_id, month, year])
  @@map("gym_usage")
  @@schema("public")
}

model gyms {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @db.Text
  owner_id                 String?                    @db.Uuid
  created_at               DateTime?                  @default(now()) @db.Timestamptz()
  updated_at               DateTime?                  @default(now()) @db.Timestamptz()
  subscription_plan_id     String?                    @db.Uuid
  status                   String?                    @default("active") @db.Text
  profiles                 profiles?                  @relation(fields: [owner_id], references: [user_id])
  subscription_plans       subscription_plans?        @relation(fields: [subscription_plan_id], references: [id])
  branches                 branches[]
  gym_usage                gym_usage[]
  payment_gateway_configs  payment_gateway_configs[]
  payment_gateway_transactions payment_gateway_transactions[]
  profiles_gym             profiles[]                 @relation("gym_profiles")

  @@map("gyms")
  @@schema("public")
}

model invoice_items {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id  String   @db.Uuid
  description String   @db.Text
  quantity    Int      @default(1)
  unit_price  Decimal  @db.Decimal(10, 2)
  // total_price Decimal? // Omit generated column
  invoices    invoices @relation(fields: [invoice_id], references: [id])

  @@map("invoice_items")
  @@schema("public")
}

model invoices {
  id                           String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id                    String                       @db.Uuid
  customer_id                  String                       @db.Uuid
  invoice_number               String                       @unique @db.Text
  issue_date                   DateTime                     @default(dbgenerated("CURRENT_DATE")) @db.Date
  due_date                     DateTime?                    @db.Date
  total_amount                 Decimal                      @db.Decimal(10, 2)
  paid_amount                  Decimal?                     @default(0.00) @db.Decimal(10, 2)
  status                       invoice_status?              @default(draft)
  related_membership_id        String?                      @db.Uuid
  related_order_id             String?                      @db.Uuid
  notes                        String?                      @db.Text
  created_at                   DateTime?                    @default(now()) @db.Timestamptz()
  branches                     branches                     @relation(fields: [branch_id], references: [id])
  profiles                     profiles                     @relation(fields: [customer_id], references: [user_id])
  member_memberships           member_memberships?          @relation(fields: [related_membership_id], references: [id])
  orders                       orders?                      @relation(fields: [related_order_id], references: [id])
  invoice_items                invoice_items[]
  member_discount_usage        member_discount_usage[]
  payment_gateway_transactions payment_gateway_transactions[]
  payments                     payments[]                   // Relation to the corrected payments model
  trainer_packages             trainer_packages[]

  @@map("invoices")
  @@schema("public")
}

model lead_notes {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id    String    @db.Uuid
  created_by String    @db.Uuid
  note       String    @db.Text
  created_at DateTime? @default(now()) @db.Timestamptz()
  leads      leads     @relation(fields: [lead_id], references: [id])
  profiles   profiles  @relation(fields: [created_by], references: [user_id])

  @@map("lead_notes")
  @@schema("public")
}

model lead_tasks {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id          String    @db.Uuid
  assigned_to      String    @db.Uuid
  task_description String    @db.Text
  due_date         DateTime? @db.Timestamptz()
  is_completed     Boolean?  @default(false)
  completed_at     DateTime? @db.Timestamptz()
  created_at       DateTime? @default(now()) @db.Timestamptz()
  leads            leads     @relation(fields: [lead_id], references: [id])
  profiles         profiles  @relation(fields: [assigned_to], references: [user_id])

  @@map("lead_tasks")
  @@schema("public")
}

model leads {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id         String         @db.Uuid
  full_name         String         @db.Text
  email             String?        @db.Text
  phone             String?        @db.Text
  source            String?        @db.Text
  assigned_to       String?        @db.Uuid
  status            lead_status?   @default(new)
  priority          lead_priority? @default(medium)
  last_contacted_at DateTime?      @db.Timestamptz()
  created_at        DateTime?      @default(now()) @db.Timestamptz()
  updated_at        DateTime?      @default(now()) @db.Timestamptz()
  estimated_value   Decimal?       @db.Decimal(10, 2)
  notes             String?        @db.Text
  branches          branches       @relation(fields: [branch_id], references: [id])
  profiles          profiles?      @relation(fields: [assigned_to], references: [user_id])
  lead_notes        lead_notes[]
  lead_tasks        lead_tasks[]

  @@map("leads")
  @@schema("public")
}

model locker_assignments {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  locker_id   String    @db.Uuid
  member_id   String    @db.Uuid
  assigned_at DateTime? @default(now()) @db.Timestamptz()
  expires_at  DateTime? @db.Timestamptz()
  status      String?   @default("active") @db.Text
  lockers     lockers   @relation(fields: [locker_id], references: [id])
  members     members   @relation(fields: [member_id], references: [id])

  @@map("locker_assignments")
  @@schema("public")
}

model locker_sizes {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @unique @db.Text
  dimensions String?  @db.Text
  price      Decimal? @default(0.00) @db.Decimal(8, 2)
  lockers    lockers[]

  @@map("locker_sizes")
  @@schema("public")
}

model lockers {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id          String               @db.Uuid
  size_id            String               @db.Uuid
  number             String               @db.Text
  location           String?              @db.Text
  status             locker_status?       @default(available)
  assigned_member_id String?              @db.Uuid
  notes              String?              @db.Text
  branches           branches             @relation(fields: [branch_id], references: [id])
  locker_sizes       locker_sizes         @relation(fields: [size_id], references: [id])
  members            members?             @relation("assigned_locker", fields: [assigned_member_id], references: [id]) // Use relation name
  locker_assignments locker_assignments[]

  @@unique([branch_id, number])
  @@map("lockers")
  @@schema("public")
}

model maintenance_records {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  equipment_id     String        @db.Uuid
  maintenance_date DateTime      @db.Date
  description      String        @db.Text
  cost             Decimal?      @default(0.00) @db.Decimal(10, 2)
  performed_by     String?       @db.Text
  technician_id    String?       @db.Uuid
  created_by       String?       @db.Uuid
  created_at       DateTime?     @default(now()) @db.Timestamptz()
  equipment        equipment     @relation(fields: [equipment_id], references: [id])
  team_members     team_members? @relation(fields: [technician_id], references: [id])
  profiles         profiles?     @relation(fields: [created_by], references: [user_id])

  @@map("maintenance_records")
  @@schema("public")
}

model member_achievements {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String       @db.Uuid
  achievement_id String       @db.Uuid
  unlocked_at    DateTime?    @default(now()) @db.Timestamptz()
  profiles       profiles     @relation(fields: [user_id], references: [user_id])
  achievements   achievements @relation(fields: [achievement_id], references: [id])

  @@unique([user_id, achievement_id])
  @@map("member_achievements")
  @@schema("public")
}

model member_analytics {
  id                           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                      String    @db.Uuid
  month                        Int
  year                         Int
  total_checkins               Int?      @default(0)
  classes_attended             Int?      @default(0)
  avg_session_duration_minutes Decimal?  @default(0.00) @db.Decimal(6, 2)
  updated_at                   DateTime? @default(now()) @db.Timestamptz()
  profiles                     profiles  @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, month, year])
  @@index([user_id, month, year], map: "idx_analytics_user_period")
  @@map("member_analytics")
  @@schema("public")
}

model member_credits {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @unique @db.Uuid
  balance         Int?      @default(0)
  last_updated_at DateTime? @default(now()) @db.Timestamptz()
  profiles        profiles  @relation(fields: [user_id], references: [user_id])

  @@map("member_credits")
  @@schema("public")
}

model member_diet_plans {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String      @db.Uuid
  diet_plan_id String      @db.Uuid
  assigned_by  String?     @db.Uuid
  start_date   DateTime    @db.Date
  end_date     DateTime?   @db.Date
  notes        String?     @db.Text
  is_active    Boolean?    @default(true)
  created_at   DateTime?   @default(now()) @db.Timestamptz()
  profiles     profiles    @relation("member_diet_plans", fields: [user_id], references: [user_id])
  diet_plans   diet_plans  @relation(fields: [diet_plan_id], references: [id])
  assigner     profiles?   @relation("assigned_diet_plans", fields: [assigned_by], references: [user_id])

  @@unique([user_id, diet_plan_id, start_date])
  @@map("member_diet_plans")
  @@schema("public")
}

model member_discount_usage {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String         @db.Uuid
  discount_code_id String         @db.Uuid
  invoice_id       String         @db.Uuid
  used_at          DateTime?      @default(now()) @db.Timestamptz()
  profiles         profiles       @relation(fields: [user_id], references: [user_id])
  discount_codes   discount_codes @relation(fields: [discount_code_id], references: [id])
  invoices         invoices       @relation(fields: [invoice_id], references: [id])

  @@unique([user_id, discount_code_id, invoice_id])
  @@map("member_discount_usage")
  @@schema("public")
}

model member_goals {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String           @db.Uuid
  goal_type        String           @db.Text
  target_value     Decimal?         @db.Decimal
  target_unit      String?          @db.Text
  start_date       DateTime?        @default(dbgenerated("CURRENT_DATE")) @db.Date
  target_date      DateTime?        @db.Date
  status           String?          @default("active") @db.Text
  notes            String?          @db.Text
  created_at       DateTime?        @default(now()) @db.Timestamptz()
  profiles         profiles         @relation(fields: [user_id], references: [user_id])
  progress_entries progress_entries[]

  @@map("member_goals")
  @@schema("public")
}

model member_measurements {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  member_id           String    @db.Uuid
  measurement_date    DateTime  @default(dbgenerated("CURRENT_DATE")) @db.Date
  weight_kg           Decimal?  @db.Decimal(6, 2)
  height_cm           Decimal?  @db.Decimal(5, 1)
  body_fat_percentage Decimal?  @db.Decimal(4, 1)
  muscle_mass_kg      Decimal?  @db.Decimal(5, 2)
  chest_cm            Decimal?  @db.Decimal(5, 1)
  waist_cm            Decimal?  @db.Decimal(5, 1)
  hips_cm             Decimal?  @db.Decimal(5, 1)
  notes               String?   @db.Text
  measured_by         String?   @db.Uuid
  members             members   @relation(fields: [member_id], references: [id])
  profiles            profiles? @relation(fields: [measured_by], references: [user_id])

  @@map("member_measurements")
  @@schema("public")
}

model member_memberships {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                    String                       @db.Uuid
  plan_id                    String                       @db.Uuid
  start_date                 DateTime                     @db.Date
  end_date                   DateTime                     @db.Date
  status                     membership_status?           @default(active)
  auto_renew                 Boolean?                     @default(false)
  payment_status             payment_transaction_status?  @default(pending) // Changed enum
  last_payment_date          DateTime?                    @db.Date
  next_billing_date          DateTime?                    @db.Date
  created_at                 DateTime?                    @default(now()) @db.Timestamptz()
  profiles                   profiles                     @relation(fields: [user_id], references: [user_id])
  membership_plans           membership_plans             @relation(fields: [plan_id], references: [id])
  invoices                   invoices[]
  membership_freeze_requests membership_freeze_requests[]

  @@index([user_id])
  @@index([plan_id])
  @@map("member_memberships")
  @@schema("public")
}

model member_workout_plans {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String         @db.Uuid
  workout_plan_id String         @db.Uuid
  assigned_by     String?        @db.Uuid
  start_date      DateTime       @db.Date
  end_date        DateTime?      @db.Date
  notes           String?        @db.Text
  is_active       Boolean?       @default(true)
  created_at      DateTime?      @default(now()) @db.Timestamptz()
  profiles        profiles       @relation("member_workout_plans", fields: [user_id], references: [user_id])
  workout_plans   workout_plans  @relation(fields: [workout_plan_id], references: [id])
  assigner        profiles?      @relation("assigned_workout_plans", fields: [assigned_by], references: [user_id])

  @@unique([user_id, workout_plan_id, start_date])
  @@map("member_workout_plans")
  @@schema("public")
}

model members {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                 String                 @unique @db.Uuid
  branch_id               String                 @db.Uuid
  member_id_string        String?                @unique @db.Text
  join_date               DateTime               @default(dbgenerated("CURRENT_DATE")) @db.Date
  date_of_birth           DateTime?              @db.Date
  gender                  String?                @db.Text
  address                 String?                @db.Text
  city                    String?                @db.Text
  state                   String?                @db.Text
  postal_code             String?                @db.Text
  emergency_contact_name  String?                @db.Text
  emergency_contact_phone String?                @db.Text
  membership_status       membership_status?     @default(active)
  last_check_in           DateTime?              @db.Timestamptz()
  profile_picture_url     String?                @db.Text
  created_at              DateTime?              @default(now()) @db.Timestamptz()
  updated_at              DateTime?              @updatedAt @db.Timestamptz()
  medical_conditions      String?                @db.Text
  fitness_goals           String?                @db.Text
  preferred_trainer_id    String?                @db.Uuid
  government_id_type      String?                @db.Text
  government_id_number    String?                @db.Text
  is_verified             Boolean?               @default(false)
  profile                 profiles               @relation(fields: [user_id], references: [user_id])
  branches                branches               @relation(fields: [branch_id], references: [id])
  preferred_trainer       trainer_profiles?      @relation(fields: [preferred_trainer_id], references: [id])
  class_enrollments       class_enrollments[]
  feedback                feedback[]
  locker_assignments      locker_assignments[]
  lockers_assigned        lockers[]              @relation("assigned_locker")
  member_measurements     member_measurements[]
  orders                  orders[]
  trainer_assignments     trainer_assignments[]
  trainer_change_requests trainer_change_requests[]
  trainer_packages        trainer_packages[]
  transactions            transactions[]

  @@map("members")
  @@schema("public")
}

model membership_freeze_requests {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  member_membership_id String             @db.Uuid
  requested_by         String             @db.Uuid
  request_date         DateTime?          @default(now()) @db.Timestamptz()
  start_date           DateTime           @db.Date
  end_date             DateTime           @db.Date
  reason               String?            @db.Text
  status               freeze_status?     @default(pending)
  reviewed_by          String?            @db.Uuid
  reviewed_at          DateTime?          @db.Timestamptz()
  reviewer_notes       String?            @db.Text
  member_memberships   member_memberships @relation(fields: [member_membership_id], references: [id])
  requester            profiles           @relation("requested_freezes", fields: [requested_by], references: [user_id])
  reviewer             profiles?          @relation("reviewed_freezes", fields: [reviewed_by], references: [user_id])

  @@map("membership_freeze_requests")
  @@schema("public")
}

model membership_plans {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id          String?              @db.Uuid
  name               String               @db.Text
  description        String?              @db.Text
  price              Decimal              @db.Decimal(10, 2)
  duration           Int
  duration_unit      plan_duration_unit
  features           String[]             @db.Text
  is_active          Boolean?             @default(true)
  created_at         DateTime?            @default(now()) @db.Timestamptz()
  updated_at         DateTime?            @updatedAt @db.Timestamptz()
  branches           branches?            @relation(fields: [branch_id], references: [id])
  member_memberships member_memberships[]

  @@map("membership_plans")
  @@schema("public")
}

model notification_preferences {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String    @unique @db.Uuid
  email_promotions   Boolean?  @default(true)
  email_reminders    Boolean?  @default(true)
  sms_notifications  Boolean?  @default(false)
  push_notifications Boolean?  @default(true)
  updated_at         DateTime? @updatedAt @db.Timestamptz()
  profiles           profiles  @relation(fields: [user_id], references: [user_id])

  @@map("notification_preferences")
  @@schema("public")
}

model order_items {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id   String   @db.Uuid
  product_id String   @db.Uuid
  quantity   Int      @default(1)
  unit_price Decimal  @db.Decimal(10, 2)
  orders     orders   @relation(fields: [order_id], references: [id])
  products   products @relation(fields: [product_id], references: [id])

  @@map("order_items")
  @@schema("public")
}

model orders {
  id                           String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id                    String                       @db.Uuid
  member_id                    String                       @db.Uuid
  order_number                 String                       @unique @default(dbgenerated("concat('ORD', to_char(now()::timestamp, 'YYYYMMDDHH24MISS'), floor(random() * 1000)::int)")) @db.VarChar(50)
  order_date                   DateTime?                    @default(now()) @db.Timestamptz()
  total_amount                 Decimal                      @db.Decimal(10, 2)
  status                       order_status?                @default(pending)
  payment_method               String?                      @db.Text
  payment_status               payment_transaction_status?  @default(pending) // Changed enum
  created_at                   DateTime?                    @default(now()) @db.Timestamptz()
  updated_at                   DateTime?                    @updatedAt @db.Timestamptz()
  branches                     branches                     @relation(fields: [branch_id], references: [id])
  members                      members                      @relation(fields: [member_id], references: [id])
  credit_transactions          credit_transactions[]
  invoices                     invoices[]
  order_items                  order_items[]
  payment_gateway_transactions payment_gateway_transactions[]

  @@map("orders")
  @@schema("public")
}

model payment_gateway_configs {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gym_id                     String                       @db.Uuid
  branch_id                  String?                      @db.Uuid
  provider                   payment_gateway_provider
  config_details             Json                         @db.JsonB
  is_active                  Boolean?                     @default(true)
  environment                String?                      @default("sandbox") @db.Text
  created_at                 DateTime?                    @default(now()) @db.Timestamptz()
  updated_at                 DateTime?                    @updatedAt @db.Timestamptz()
  gyms                       gyms                         @relation(fields: [gym_id], references: [id])
  branches                   branches?                    @relation(fields: [branch_id], references: [id])
  payment_gateway_transactions payment_gateway_transactions[]

  @@unique([gym_id, branch_id, provider, environment])
  @@index([branch_id], map: "idx_payment_gateway_configs_branch_id")
  @@index([provider], map: "idx_payment_gateway_configs_provider")
  @@map("payment_gateway_configs")
  @@schema("public")
}

model payment_gateway_transactions {
  id                      String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gym_id                  String                     @db.Uuid
  branch_id               String?                    @db.Uuid
  customer_id             String?                    @db.Uuid
  order_id                String?                    @db.Uuid
  invoice_id              String?                    @db.Uuid
  provider                payment_gateway_provider
  gateway_transaction_id  String?                    @unique @db.Text
  gateway_order_id        String?                    @db.Text
  amount                  Decimal                    @db.Decimal(10, 2)
  currency                String?                    @default("INR") @db.Text
  status                  payment_transaction_status // Changed enum
  payment_method          String?                    @db.Text
  gateway_response        Json?                      @db.JsonB
  failure_reason          String?                    @db.Text
  transaction_time        DateTime?                  @default(now()) @db.Timestamptz()
  created_at              DateTime?                  @default(now()) @db.Timestamptz()
  gateway_config_id       String?                    @db.Uuid
  gyms                    gyms                       @relation(fields: [gym_id], references: [id])
  branches                branches?                  @relation(fields: [branch_id], references: [id])
  profiles                profiles?                  @relation(fields: [customer_id], references: [user_id])
  orders                  orders?                    @relation(fields: [order_id], references: [id])
  invoices                invoices?                  @relation(fields: [invoice_id], references: [id])
  payment_gateway_configs payment_gateway_configs? @relation(fields: [gateway_config_id], references: [id])

  @@unique([gateway_order_id, provider])
  @@index([customer_id], map: "idx_payment_gateway_transactions_customer_id")
  @@index([gateway_order_id], map: "idx_payment_gateway_transactions_gateway_order_id")
  @@index([order_id], map: "idx_payment_gateway_transactions_order_id")
  @@index([status], map: "idx_payment_gateway_transactions_status")
  @@map("payment_gateway_transactions")
  @@schema("public")
}

model payment_methods {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique @db.Text
  is_active    Boolean?       @default(true)
  is_online    Boolean?       @default(false)
  transactions transactions[]

  @@map("payment_methods")
  @@schema("public")
}

model payments {
  id                  String                       @id @db.VarChar(50)
  txn_id              String                       @unique @db.VarChar(100)
  order_id            String?                      @db.VarChar(100)
  payment_reference   String?                      @db.VarChar(100)
  member_id           String?                      @db.VarChar(50)
  amount              Decimal                      @db.Decimal(10, 2)
  currency            String?                      @default("INR") @db.VarChar(10)
  payment_type        payment_type
  gateway_type        payment_gateway_type
  payment_method      payment_method
  status              payment_transaction_status?  @default(pending)
  invoice_id          String?                      @db.Uuid
  membership_id       String?                      @db.VarChar(50)
  pos_order_id        String?                      @db.VarChar(50)
  training_package_id String?                      @db.VarChar(50)
  gateway_response    Json?                        @db.JsonB
  failure_reason      String?                      @db.Text
  initiated_by        String?                      @db.Uuid
  completed_at        DateTime?                    @db.Timestamp(6)
  created_at          DateTime?                    @default(now()) @db.Timestamp(6)
  updated_at          DateTime?                    @updatedAt @db.Timestamp(6)
  invoice             invoices?                 @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map:"payments_invoice_id_fkey")
  initiator           profiles?                 @relation("recorded_by", fields: [initiated_by], references: [user_id])
  payment_logs        payment_logs[]
  payment_links       payment_links[]
  email_logs          email_logs[]
  sms_logs            sms_logs[]
  notification_logs   notification_logs[]
  payment_receipts    payment_receipts[]

  @@index([member_id], map: "idx_member_payments")
  @@index([status], map: "idx_payment_status")
  @@index([payment_type], map: "idx_payment_type")
  @@index([txn_id], map: "idx_txn_id")
  @@map("payments")
  @@schema("public")
}

model permissions {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String             @unique @db.Text
  description      String?            @db.Text
  category         permission_category
  module           String?            @db.Text
  role_permissions role_permissions[]

  @@index([category], map: "idx_permissions_category")
  @@index([module], map: "idx_permissions_module")
  @@map("permissions")
  @@schema("public")
}

model products {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id      String        @db.Uuid
  name           String        @db.Text
  description    String?       @db.Text
  price          Decimal       @db.Decimal(10, 2)
  sku            String?       @unique @db.Text
  stock_quantity Int?          @default(0)
  category       String?       @db.Text
  is_active      Boolean?      @default(true)
  created_at     DateTime?     @default(now()) @db.Timestamptz()
  updated_at     DateTime?     @updatedAt @db.Timestamptz()
  branches       branches      @relation(fields: [branch_id], references: [id])
  order_items    order_items[]

  @@map("products")
  @@schema("public")
}

model profiles {
  user_id                   String                       @id @unique @db.Uuid
  email                     String                       @unique @db.Text
  full_name                 String?                      @db.Text
  avatar_url                String?                      @db.Text
  phone                     String?                      @db.Text
  role                      user_role                    @default(member)
  team_role                 String?                      @db.Text
  branch_id                 String?                      @db.Uuid
  gym_id                    String?                      @db.Uuid
  is_active                 Boolean?                     @default(true)
  created_at                DateTime?                    @default(now()) @db.Timestamptz()
  updated_at                DateTime?                    @updatedAt @db.Timestamptz()
  branches                  branches?                    @relation(fields: [branch_id], references: [id])
  gym                       gyms?                        @relation("gym_profiles", fields: [gym_id], references: [id])
  ai_insights               ai_insights[]
  analytics_events          analytics_events[]
  created_announcements     announcements[]
  attendance_records        attendance_records[]
  credit_transactions       credit_transactions[]
  created_diet_plans        diet_plans[]
  created_email_templates   email_templates[]            @relation("creator")
  feedback_responses        feedback_responses[]
  owned_gyms                gyms[]
  customer_invoices         invoices[]
  created_lead_notes        lead_notes[]
  assigned_lead_tasks       lead_tasks[]
  assigned_leads            leads[]
  created_maintenance_records maintenance_records[]
  member_achievements       member_achievements[]
  member_analytics          member_analytics[]
  member_credits            member_credits?
  assigned_diet_plans       member_diet_plans[]          @relation("assigned_diet_plans")
  member_discount_usage     member_discount_usage[]
  member_goals              member_goals[]
  measured_by_measurements  member_measurements[]
  member_memberships        member_memberships[]
  assigned_workout_plans    member_workout_plans[]       @relation("assigned_workout_plans")
  member_diet_plans         member_diet_plans[]          @relation("member_diet_plans")
  member_workout_plans      member_workout_plans[]       @relation("member_workout_plans")
  member_profile            members?
  requested_freezes         membership_freeze_requests[] @relation("requested_freezes")
  reviewed_freezes          membership_freeze_requests[] @relation("reviewed_freezes")
  notification_preferences  notification_preferences?
  recorded_payments         payments[]                   @relation("recorded_by")
  user_progress_entries     progress_entries[]           @relation("user_progress")
  recorded_progress_entries progress_entries[]           @relation("recorded_progress")
  progress_photos           progress_photos[]
  referral_analytics        referral_analytics[]
  referrer_bonus_history    referral_bonus_history[]     @relation("referrer_bonuses")
  referee_bonus_history     referral_bonus_history[]     @relation("referee_bonuses")
  referrer_referrals        referrals[]                  @relation("referrer_referrals")
  referee_referrals         referrals[]                  @relation("referee_referrals")
  created_sms_templates     sms_templates[]              @relation("creator")
  team_member_profile       team_members?
  created_trainer_assignments trainer_assignments[]
  approved_change_requests  trainer_change_requests[]
  trainer_profile           trainer_profiles?
  recorded_transactions     transactions[]
  user_notifications        user_notifications[]
  user_roles                user_roles[]
  created_whatsapp_templates whatsapp_templates[]        @relation("creator")
  created_workout_plans     workout_plans[]
  payment_gateway_transactions payment_gateway_transactions[]

  @@map("profiles")
  @@schema("public")
}

model progress_entries {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String           @db.Uuid
  entry_date       DateTime         @default(dbgenerated("CURRENT_DATE")) @db.Date
  related_goal_id  String?          @db.Uuid
  entry_type       String           @db.Text
  value            String?          @db.Text
  unit             String?          @db.Text
  notes            String?          @db.Text
  recorded_by      String?          @db.Uuid
  created_at       DateTime?        @default(now()) @db.Timestamptz()
  profiles         profiles         @relation("user_progress", fields: [user_id], references: [user_id]) // Added missing relation field
  member_goals     member_goals?    @relation(fields: [related_goal_id], references: [id])
  recorder         profiles?        @relation("recorded_progress", fields: [recorded_by], references: [user_id])
  progress_photos  progress_photos[]

  @@index([user_id, entry_date])
  @@index([related_goal_id])
  @@map("progress_entries")
  @@schema("public")
}

model progress_photos {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String            @db.Uuid
  photo_url        String            @db.Text
  upload_date      DateTime?         @default(now()) @db.Timestamptz()
  description      String?           @db.Text
  related_entry_id String?           @db.Uuid
  profiles         profiles          @relation(fields: [user_id], references: [user_id])
  progress_entries progress_entries? @relation(fields: [related_entry_id], references: [id])

  @@map("progress_photos")
  @@schema("public")
}

model referral_analytics {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String    @db.Uuid
  period_start         DateTime  @db.Date
  period_end           DateTime  @db.Date
  referrals_sent       Int?      @default(0)
  successful_referrals Int?      @default(0)
  bonuses_earned       Decimal?  @default(0.00) @db.Decimal(10, 2)
  updated_at           DateTime? @default(now()) @db.Timestamptz()
  profiles             profiles  @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, period_start, period_end])
  @@map("referral_analytics")
  @@schema("public")
}

model referral_bonus_history {
  id                     String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referrer_user_id       String              @db.Uuid
  referee_user_id        String?             @db.Uuid
  referral_id            String?             @db.Uuid
  bonus_type             referral_bonus_type
  bonus_value            String              @db.Text
  awarded_at             DateTime?           @default(now()) @db.Timestamptz()
  description            String?             @db.Text
  related_transaction_id String?             @db.Uuid
  referrer               profiles            @relation("referrer_bonuses", fields: [referrer_user_id], references: [user_id])
  referee                profiles?           @relation("referee_bonuses", fields: [referee_user_id], references: [user_id])
  referrals              referrals?          @relation(fields: [referral_id], references: [id])
  transactions           transactions?       @relation(fields: [related_transaction_id], references: [id])
  credit_transactions    credit_transactions[]

  @@index([referral_id], map: "idx_bonus_history_referral")
  @@map("referral_bonus_history")
  @@schema("public")
}

model referral_bonuses {
  id                        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referral_setting_id       String              @db.Uuid
  trigger_event             String              @db.Text
  bonus_type                referral_bonus_type
  bonus_value               String              @db.Text
  applies_to_referrer       Boolean?            @default(true)
  applies_to_referee        Boolean?            @default(false)
  description               String?             @db.Text
  is_active                 Boolean?            @default(true)
  referral_settings         referral_settings   @relation(fields: [referral_setting_id], references: [id])
  referral_settings_default referral_settings[] @relation("default_bonus")

  @@map("referral_bonuses")
  @@schema("public")
}

model referral_settings {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id            String?            @unique @db.Uuid
  is_enabled           Boolean?           @default(true)
  referral_code_type   String?            @default("unique_user") @db.Text
  default_bonus_id     String?            @db.Uuid
  terms_and_conditions String?            @db.Text
  updated_at           DateTime?          @default(now()) @db.Timestamptz()
  branches             branches?          @relation(fields: [branch_id], references: [id])
  default_bonus        referral_bonuses?  @relation("default_bonus", fields: [default_bonus_id], references: [id])
  referral_bonuses     referral_bonuses[]

  @@map("referral_settings")
  @@schema("public")
}

model referrals {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referrer_user_id       String                 @db.Uuid
  referee_email          String?                @db.Text
  referee_phone          String?                @db.Text
  referral_code_used     String?                @db.Text
  status                 String?                @default("pending") @db.Text
  referee_user_id        String?                @db.Uuid
  conversion_date        DateTime?              @db.Timestamptz()
  created_at             DateTime?              @default(now()) @db.Timestamptz()
  referrer               profiles               @relation("referrer_referrals", fields: [referrer_user_id], references: [user_id])
  referee                profiles?              @relation("referee_referrals", fields: [referee_user_id], references: [user_id])
  referral_bonus_history referral_bonus_history[]

  @@unique([referrer_user_id, referee_email])
  @@unique([referrer_user_id, referee_phone])
  @@index([referrer_user_id])
  @@index([referee_user_id])
  @@index([status])
  @@index([created_at])
  @@map("referrals")
  @@schema("public")
}

model role_permissions {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id       String      @db.Uuid
  permission_id String      @db.Uuid
  roles         roles       @relation(fields: [role_id], references: [id])
  permissions   permissions @relation(fields: [permission_id], references: [id])

  @@unique([role_id, permission_id])
  @@index([role_id], map: "idx_role_permissions_role")
  @@index([permission_id], map: "idx_role_permissions_permission")
  @@map("role_permissions")
  @@schema("public")
}

model roles {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String             @unique @db.Text
  description      String?            @db.Text
  scope            role_scope         @default(branch)
  role_permissions role_permissions[]
  user_roles       user_roles[]

  @@map("roles")
  @@schema("public")
}

model sms_templates {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id  String?           @db.Uuid
  type       sms_template_type
  name       String            @db.Text
  content    String            @db.Text
  variables  Json?             @db.JsonB
  is_active  Boolean?          @default(true)
  created_by String?           @db.Uuid // Points to profiles.user_id
  created_at DateTime?         @default(now()) @db.Timestamptz()
  updated_at DateTime?         @updatedAt @db.Timestamptz()
  branches   branches?         @relation(fields: [branch_id], references: [id])
  creator    profiles?         @relation("creator", fields: [created_by], references: [user_id])

  @@unique([branch_id, type, name])
  @@map("sms_templates")
  @@schema("public")
}

model subscription_plans {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @unique @db.Text
  price_monthly Decimal   @db.Decimal(10, 2)
  price_yearly  Decimal?  @db.Decimal(10, 2)
  features      Json?     @db.JsonB
  max_branches  Int?
  max_members   Int?
  max_staff     Int?
  is_active     Boolean?  @default(true)
  gyms          gyms[]

  @@map("subscription_plans")
  @@schema("public")
}

model system_backups {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  backup_time      DateTime?     @default(now()) @db.Timestamptz()
  backup_type      backup_type
  status           backup_status
  file_path        String?       @db.Text
  file_size_mb     Decimal?      @db.Decimal(10, 2)
  duration_seconds Int?
  initiated_by     String?       @db.Text
  notes            String?       @db.Text

  @@map("system_backups")
  @@schema("public")
}

model system_events {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_time     DateTime?      @default(now()) @db.Timestamptz()
  event_category event_category
  event_type     event_type
  severity       severity_level? @default(info)
  description    String         @db.Text
  details        Json?          @db.JsonB
  user_id        String?        @db.Uuid
  ip_address     String?        @db.Text

  @@map("system_events")
  @@schema("public")
}

model system_settings {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id   String?   @db.Uuid
  key         String    @db.Text
  value       String?   @db.Text
  description String?   @db.Text
  category    String?   @db.Text
  updated_at  DateTime? @updatedAt @db.Timestamptz()
  branches    branches? @relation(fields: [branch_id], references: [id])

  @@unique([branch_id, key])
  @@index([branch_id], map: "idx_system_settings_branch_id")
  @@index([category, branch_id], map: "idx_system_settings_category_branch")
  @@map("system_settings")
  @@schema("public")
}

model team_members {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String              @unique @db.Uuid
  branch_id            String              @db.Uuid
  employee_id          String?             @unique @db.Text
  hire_date            DateTime            @db.Date
  job_title            String?             @db.Text
  department           String?             @db.Text
  manager_id           String?             @db.Uuid
  status               team_member_status? @default(active)
  performance_rating   Int?
  skills               String[]            @db.Text
  certifications       String[]            @db.Text
  created_at           DateTime?           @default(now()) @db.Timestamptz()
  updated_at           DateTime?           @updatedAt @db.Timestamptz()
  profile              profiles            @relation(fields: [user_id], references: [user_id])
  branches             branches            @relation(fields: [branch_id], references: [id])
  manager              team_members?       @relation("ManagerSubordinates", fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates         team_members[]      @relation("ManagerSubordinates")
  maintenance_records  maintenance_records[]

  @@map("team_members")
  @@schema("public")
}

model trainer_analytics {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trainer_id            String            @db.Uuid
  month                 Int
  year                  Int
  sessions_conducted    Int?              @default(0)
  avg_session_rating    Decimal?          @db.Decimal(3, 2)
  client_retention_rate Decimal?          @db.Decimal(5, 2)
  total_earnings        Decimal?          @default(0.00) @db.Decimal(12, 2)
  updated_at            DateTime?         @default(now()) @db.Timestamptz()
  trainer_profiles      trainer_profiles  @relation(fields: [trainer_id], references: [id])

  @@unique([trainer_id, month, year])
  @@map("trainer_analytics")
  @@schema("public")
}

model trainer_assignments {
  id                   String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trainer_id           String                       @db.Uuid
  member_id            String                       @db.Uuid
  session_type         session_type
  package_id           String?                      @db.Uuid
  scheduled_date       DateTime                     @db.Timestamptz()
  duration_minutes     Int                          @default(60) @map("duration")
  status               assignment_status            @default(scheduled)
  member_rating        Int?
  member_feedback      String?                      @db.Text
  trainer_notes        String?                      @db.Text
  created_by           String?                      @db.Uuid
  session_specialty    String                       @db.VarChar(50)
  notes                String?                      @db.Text
  completed_at         DateTime?                    @db.Timestamptz()
  is_paid              Boolean?                     @default(false)
  amount               Decimal                      @db.Decimal(10, 2)
  payment_date         DateTime?                    @db.Timestamptz()
  payment_method       String?                      @db.VarChar(50)
  assigned_by          trainer_assignment_assigned_by @default(manual)
  assignment_reason    String?                      @db.Text
  alternative_trainers String[]                     @db.Text
  created_at           DateTime?                    @default(now()) @db.Timestamptz()
  updated_at           DateTime?                    @updatedAt @db.Timestamptz()
  trainer_profiles     trainer_profiles             @relation(fields: [trainer_id], references: [id])
  members              members                      @relation(fields: [member_id], references: [id])
  trainer_packages     trainer_packages?            @relation(fields: [package_id], references: [id])
  creator              profiles?                    @relation(fields: [created_by], references: [user_id])
  trainer_reviews      trainer_reviews[]
  payment_transactions payment_transactions[]       @relation("assignment_transactions")

  @@index([trainer_id], map: "idx_assignments_trainer_id")
  @@index([member_id], map: "idx_assignments_member_id")
  @@index([scheduled_date], map: "idx_assignments_scheduled_date")
  @@index([status], map: "idx_assignments_status")
  @@map("trainer_assignments")
  @@schema("public")
}

model trainer_availability {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trainer_id       String           @db.Uuid
  day_of_week      Int
  start_time       DateTime         @db.Time
  end_time         DateTime         @db.Time
  is_available     Boolean?         @default(true)
  created_at       DateTime?        @default(now()) @db.Timestamptz()
  updated_at       DateTime?        @updatedAt @db.Timestamptz()
  trainer_profiles trainer_profiles @relation(fields: [trainer_id], references: [id])

  @@unique([trainer_id, day_of_week])
  @@map("trainer_availability")
  @@schema("public")
}

model trainer_certifications {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trainer_id           String              @db.Uuid
  name                 String              @db.VarChar(255)
  issuing_organization String              @db.VarChar(255)
  issue_date           DateTime            @db.Date
  expiry_date          DateTime?           @db.Date
  credential_id        String?             @db.Text
  level                certification_level
  verified             Boolean?            @default(false)
  created_at           DateTime?           @default(now()) @db.Timestamptz()
  trainer_profiles     trainer_profiles    @relation(fields: [trainer_id], references: [id], onDelete: Cascade)

  @@map("trainer_certifications")
  @@schema("public")
}

model trainer_change_requests {
  id                   String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  member_id            String                  @db.Uuid
  current_trainer_id   String?                 @db.Uuid
  requested_trainer_id String?                 @db.Uuid
  reason               trainer_change_reason
  description          String                  @db.Text
  urgency              trainer_change_urgency  @default(medium)
  status               trainer_change_status   @default(pending)
  requested_at         DateTime?               @default(now()) @db.Timestamptz() @map("created_at")
  approved_by          String?                 @db.Uuid @map("reviewed_by")
  approved_at          DateTime?               @db.Timestamptz() @map("reviewed_at")
  notes                String?                 @db.Text @map("review_notes")
  new_trainer_id       String?                 @db.Uuid
  reassignment_date    DateTime?               @db.Timestamptz()
  member_notified      Boolean?                @default(false)
  trainer_notified     Boolean?                @default(false)
  updated_at           DateTime?               @updatedAt @db.Timestamptz()
  members              members                 @relation(fields: [member_id], references: [id])
  current_trainer      trainer_profiles?       @relation("current_trainer_requests", fields: [current_trainer_id], references: [id], onDelete: Cascade)
  requested_trainer    trainer_profiles?       @relation("requested_trainer_requests", fields: [requested_trainer_id], references: [id], onDelete: SetNull)
  approver             profiles?               @relation(fields: [approved_by], references: [user_id])
  new_trainer          trainer_profiles?       @relation("new_trainer_assignments", fields: [new_trainer_id], references: [id], onDelete: SetNull)
  change_request_workflow change_request_workflow[]

  @@index([status], map: "idx_change_requests_status")
  @@index([member_id], map: "idx_change_requests_member_id")
  @@index([current_trainer_id], map: "idx_change_requests_current_trainer")
  @@index([requested_at(sort: Desc)], map: "idx_change_requests_created_at")
  @@map("trainer_change_requests")
  @@schema("public")
}

model trainer_package_rates {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trainer_id       String?            @db.Uuid
  branch_id        String             @db.Uuid
  name             String             @db.Text
  sessions         Int
  price            Decimal            @db.Decimal(10, 2)
  validity_days    Int
  description      String?            @db.Text
  is_active        Boolean?           @default(true)
  created_at       DateTime?          @default(now()) @db.Timestamptz()
  trainer_profiles trainer_profiles?  @relation(fields: [trainer_id], references: [id], onDelete: Cascade)
  branches         branches           @relation(fields: [branch_id], references: [id])
  trainer_packages trainer_packages[] @relation("PackageRatePackages")

  @@map("trainer_package_rates")
  @@schema("public")
}

model trainer_packages {
  id                   String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  member_id            String                       @db.Uuid
  package_rate_id      String                       @db.Uuid
  trainer_id           String?                      @db.Uuid
  purchase_date        DateTime?                    @default(now()) @db.Timestamptz()
  expiry_date          DateTime                     @db.Timestamptz()
  sessions_total       Int                          @map("sessions_total")
  sessions_used        Int?                         @default(0) @map("sessions_used")
  // remaining_sessions Int?                       // Omit generated column
  status               package_status?              @default(active)
  payment_status       payment_transaction_status?  @default(pending) // Changed enum
  total_amount         Decimal                      @db.Decimal(10, 2)
  payment_id           String?                      @db.VarChar(255)
  related_invoice_id   String?                      @db.Uuid
  created_at           DateTime?                    @default(now()) @db.Timestamptz()
  updated_at           DateTime?                    @updatedAt @db.Timestamptz()
  members              members                      @relation(fields: [member_id], references: [id])
  package_rate         trainer_package_rates        @relation("PackageRatePackages", fields: [package_rate_id], references: [id])
  trainer_profiles     trainer_profiles?            @relation(fields: [trainer_id], references: [id], onDelete: SetNull)
  invoices             invoices?                    @relation(fields: [related_invoice_id], references: [id])
  trainer_assignments  trainer_assignments[]
  payment_transactions payment_transactions[]       @relation("package_transactions")

  @@map("trainer_packages")
  @@schema("public")
}

model trainer_profiles {
  id                         String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                    String                    @unique @db.Uuid
  branch_id                  String                    @db.Uuid
  employee_id                String?                   @unique @db.VarChar(50)
  specialties                String[]                  @default([]) @db.Text
  bio                        String?                   @db.Text
  experience_years           Int                       @default(0) @map("experience")
  rating_avg                 Decimal?                  @default(0.00) @db.Decimal(3, 2) @map("rating")
  hourly_rate                Decimal                   @db.Decimal(10, 2)
  status                     trainer_status            @default(active)
  created_at                 DateTime?                 @default(now()) @db.Timestamptz()
  updated_at                 DateTime?                 @updatedAt @db.Timestamptz()
  branch_name                String                    @db.VarChar(255)
  full_name                  String                    @db.VarChar(255)
  email                      String                    @unique @db.VarChar(255)
  phone                      String?                   @db.VarChar(20)
  avatar_url                 String?                   @db.Text
  date_of_birth              DateTime?                 @db.Date
  join_date                  DateTime                  @default(dbgenerated("CURRENT_DATE")) @db.Date
  languages                  String[]                  @default(["English"]) @db.Text
  max_clients_per_day        Int                       @default(8)
  max_clients_per_week       Int                       @default(40)
  total_sessions             Int?                      @default(0)
  total_clients              Int?                      @default(0)
  completion_rate            Int?                      @default(100)
  punctuality_score          Int?                      @default(100)
  is_active                  Boolean?                  @default(true)
  profile                    profiles                  @relation(fields: [user_id], references: [user_id])
  branches                   branches                  @relation(fields: [branch_id], references: [id])
  gym_classes                gym_classes[]
  members_preferring         members[]
  trainer_analytics          trainer_analytics[]
  trainer_assignments        trainer_assignments[]
  trainer_availability       trainer_availability[]
  trainer_certifications     trainer_certifications[]
  current_trainer_requests   trainer_change_requests[] @relation("current_trainer_requests")
  requested_trainer_requests trainer_change_requests[] @relation("requested_trainer_requests")
  new_trainer_assignments    trainer_change_requests[] @relation("new_trainer_assignments")
  trainer_package_rates      trainer_package_rates[]
  trainer_packages           trainer_packages[]
  trainer_utilization        trainer_utilization[]
  trainer_reviews            trainer_reviews[]
  payment_transactions       payment_transactions[]    @relation("trainer_transactions")

  @@index([branch_id], map: "idx_trainers_branch_id")
  @@index([status], map: "idx_trainers_status")
  @@index([rating_avg(sort: Desc)], map: "idx_trainers_rating")
  @@map("trainer_profiles")
  @@schema("public")
}

model trainer_utilization {
  id                      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trainer_id              String             @db.Uuid
  period                  utilization_period
  date                    DateTime           @db.Date
  total_available_hours   Decimal            @db.Decimal(5, 2)
  booked_hours            Decimal            @db.Decimal(5, 2)
  // utilization_rate Decimal?           // Omit generated column
  scheduled_sessions      Int?               @default(0)
  completed_sessions      Int?               @default(0)
  cancelled_sessions      Int?               @default(0)
  no_show_sessions        Int?               @default(0)
  total_revenue           Decimal?           @default(0.00) @db.Decimal(10, 2)
  average_session_value   Decimal?           @default(0.00) @db.Decimal(10, 2)
  average_rating          Decimal?           @default(0.00) @db.Decimal(3, 2)
  punctuality_score       Int?               @default(100)
  created_at              DateTime?          @default(now()) @db.Timestamptz()
  trainer_profiles        trainer_profiles   @relation(fields: [trainer_id], references: [id], onDelete: Cascade)

  @@unique([trainer_id, period, date])
  @@index([trainer_id, period, date], map: "idx_utilization_trainer_period_date")
  @@index([date(sort: Desc)], map: "idx_utilization_date")
  @@map("trainer_utilization")
  @@schema("public")
}

model transaction_categories {
  id           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id    String?            @db.Uuid
  name         String             @db.Text
  type         transaction_kind
  description  String?            @db.Text
  transactions transactions[]
  branches     branches?      @relation(fields: [branch_id], references: [id])

  @@unique([branch_id, name, type])
  @@map("transaction_categories")
  @@schema("public")
}

model transactions {
  id                     String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id              String                       @db.Uuid
  category_id            String?                      @db.Uuid
  member_id              String?                      @db.Uuid
  transaction_date       DateTime                     @default(dbgenerated("CURRENT_DATE")) @db.Date
  amount                 Decimal                      @db.Decimal(12, 2)
  type                   transaction_kind
  description            String?                      @db.Text
  payment_method_id      String?                      @db.Uuid
  reference_id           String?                      @db.Text
  status                 payment_transaction_status?  @default(completed)
  recorded_by            String?                      @db.Uuid
  created_at             DateTime?                    @default(now()) @db.Timestamptz()
  branches               branches                     @relation(fields: [branch_id], references: [id])
  transaction_categories transaction_categories?      @relation(fields: [category_id], references: [id])
  members                members?                     @relation(fields: [member_id], references: [id])
  payment_methods        payment_methods?             @relation(fields: [payment_method_id], references: [id])
  profiles               profiles?                    @relation(fields: [recorded_by], references: [user_id])
  referral_bonus_history referral_bonus_history[]

  @@map("transactions")
  @@schema("public")
}

model user_notifications {
  id                BigInt            @id @default(autoincrement())
  user_id           String            @db.Uuid
  notification_type notification_type @map("type")
  title             String            @db.VarChar(255)
  message           String            @db.Text
  action_url        String?           @db.VarChar(500)
  is_read           Boolean?          @default(false)
  read_at           DateTime?         @db.Timestamp(6)
  created_at        DateTime?         @default(now()) @db.Timestamp(6)
  profiles          profiles          @relation(fields: [user_id], references: [user_id])

  @@index([user_id, created_at], map: "idx_user_notifications_member") // Renamed map
  @@index([user_id, is_read], map: "idx_user_notifications_unread") // Renamed map
  @@map("user_notifications")
  @@schema("public")
}

model user_roles {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id   String    @db.Uuid
  role_id   String    @db.Uuid
  branch_id String?   @db.Uuid
  profiles  profiles  @relation(fields: [user_id], references: [user_id])
  roles     roles     @relation(fields: [role_id], references: [id])
  branches  branches? @relation(fields: [branch_id], references: [id])

  @@unique([user_id, role_id, branch_id])
  @@index([role_id], map: "idx_user_roles_role")
  @@index([user_id], map: "idx_user_roles_user_id")
  @@map("user_roles")
  @@schema("public")
}

model whatsapp_templates {
  id                   String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id            String?                  @db.Uuid
  name                 String                   @db.Text
  category             whatsapp_template_category
  event                String                   @db.Text
  template_type        whatsapp_template_type   @default(text)
  header_type          String?                  @db.Text
  header_content       String?                  @db.Text
  body_text            String                   @db.Text
  footer_text          String?                  @db.Text
  buttons              Json?                    @default("[]") @db.JsonB
  variables            Json?                    @default("[]") @db.JsonB
  status               whatsapp_template_status? @default(pending)
  provider_template_id String?                  @db.Text
  is_active            Boolean?                 @default(true)
  created_at           DateTime?                @default(now()) @db.Timestamptz()
  updated_at           DateTime?                @updatedAt @db.Timestamptz()
  created_by           String?                  @db.Uuid
  branches             branches?                @relation(fields: [branch_id], references: [id])
  creator              profiles?                @relation("creator", fields: [created_by], references: [user_id])

  @@map("whatsapp_templates")
  @@schema("public")
}

model work_shifts {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id      String?   @db.Uuid
  name           String    @db.Text
  start_time     DateTime  @db.Time
  end_time       DateTime  @db.Time
  days           String[]  @db.Text
  user_ids       String[]  @db.Uuid
  minimum_hours  Decimal?  @default(8) @db.Decimal
  maximum_hours  Decimal?  @default(12) @db.Decimal
  grace_period   Int?      @default(15)
  late_threshold Int?      @default(30)
  break_duration Int?      @default(60)
  is_active      Boolean?  @default(true)
  created_at     DateTime  @default(now()) @db.Timestamptz()
  updated_at     DateTime  @updatedAt @db.Timestamptz()
  branches       branches? @relation(fields: [branch_id], references: [id])

  @@map("work_shifts")
  @@schema("public")
}

model workout_plans {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_by           String?                @db.Uuid
  branch_id            String?                @db.Uuid
  name                 String                 @db.Text
  description          String?                @db.Text
  difficulty           class_difficulty
  goal                 String?                @db.Text
  plan_details         Json?                  @db.JsonB
  status               plan_status?           @default(active)
  created_at           DateTime?              @default(now()) @db.Timestamptz()
  updated_at           DateTime?              @updatedAt @db.Timestamptz()
  creator              profiles?              @relation(fields: [created_by], references: [user_id])
  branches             branches?              @relation(fields: [branch_id], references: [id])
  member_workout_plans member_workout_plans[]

  @@map("workout_plans")
  @@schema("public")
}

model payment_gateways {
  id                String                      @id @db.VarChar(50)
  name              String                      @db.VarChar(100)
  type              payment_gateway_type
  is_active         Boolean?                    @default(false)
  environment       payment_gateway_environment? @default(sandbox)
  api_key           String?                     @db.VarChar(500)
  api_secret        String?                     @db.VarChar(500)
  merchant_id       String?                     @db.VarChar(200)
  webhook_secret    String?                     @db.VarChar(500)
  additional_config Json?                       @db.JsonB
  created_at        DateTime?                   @default(now()) @db.Timestamp(6)
  updated_at        DateTime?                   @updatedAt @db.Timestamp(6)

  @@map("payment_gateways")
  @@schema("public")
}

model payment_logs {
  id                BigInt                      @id @default(autoincrement())
  payment_id        String?                     @db.VarChar(50)
  gateway_type      payment_gateway_type
  log_type          payment_log_type
  request_payload   Json?                       @db.JsonB
  response_payload  Json?                       @db.JsonB
  headers           Json?                       @db.JsonB
  status_code       Int?
  processing_status payment_processing_status? @default(received)
  error_message     String?                     @db.Text
  received_at       DateTime?                   @default(now()) @db.Timestamp(6)
  processed_at      DateTime?                   @db.Timestamp(6)
  payment           payments?                   @relation(fields: [payment_id], references: [id])

  @@index([payment_id], map: "idx_payment_logs")
  @@index([gateway_type, received_at], map: "idx_gateway_logs")
  @@map("payment_logs")
  @@schema("public")
}

model payment_links {
  id           String       @id @db.VarChar(50)
  payment_id   String       @db.VarChar(50)
  link_token   String       @unique @db.VarChar(100)
  member_id    String       @db.VarChar(50)
  amount       Decimal      @db.Decimal(10, 2)
  payment_type payment_type
  description  String?      @db.Text
  expires_at   DateTime     @db.Timestamp(6)
  is_used      Boolean?     @default(false)
  used_at      DateTime?    @db.Timestamp(6)
  created_by   String?      @db.VarChar(50)
  created_at   DateTime?    @default(now()) @db.Timestamp(6)
  payment      payments     @relation(fields: [payment_id], references: [id])

  @@index([link_token], map: "idx_payment_links_token")
  @@index([member_id], map: "idx_payment_links_member")
  @@map("payment_links")
  @@schema("public")
}

model email_logs {
  id                BigInt           @id @default(autoincrement())
  payment_id        String?          @db.VarChar(50)
  member_id         String?          @db.VarChar(50)
  email_type        email_log_type
  recipient_email   String           @db.VarChar(255)
  subject           String?          @db.VarChar(500)
  email_body        String?          @db.Text
  template_used     String?          @db.VarChar(100)
  delivery_status   delivery_status? @default(queued)
  provider_response Json?            @db.JsonB
  sent_at           DateTime?        @default(now()) @db.Timestamp(6)
  delivered_at      DateTime?        @db.Timestamp(6)
  payment           payments?        @relation(fields: [payment_id], references: [id])

  @@index([payment_id], map: "idx_email_logs_payment")
  @@index([member_id], map: "idx_email_logs_member")
  @@map("email_logs")
  @@schema("public")
}

model sms_logs {
  id                BigInt           @id @default(autoincrement())
  payment_id        String?          @db.VarChar(50)
  member_id         String?          @db.VarChar(50)
  sms_type          sms_log_type
  recipient_phone   String           @db.VarChar(20)
  message_content   String           @db.Text
  template_used     String?          @db.VarChar(100)
  delivery_status   delivery_status? @default(queued)
  provider          String?          @db.VarChar(50)
  provider_response Json?            @db.JsonB
  sent_at           DateTime?        @default(now()) @db.Timestamp(6)
  delivered_at      DateTime?        @db.Timestamp(6)
  payment           payments?        @relation(fields: [payment_id], references: [id])

  @@index([payment_id], map: "idx_sms_logs_payment")
  @@index([member_id], map: "idx_sms_logs_member")
  @@map("sms_logs")
  @@schema("public")
}

model notification_logs {
  id                BigInt            @id @default(autoincrement())
  payment_id        String?           @db.VarChar(50)
  member_id         String            @db.VarChar(50)
  notification_type notification_type
  title             String            @db.VarChar(255)
  message           String            @db.Text
  action_url        String?           @db.VarChar(500)
  is_read           Boolean?          @default(false)
  read_at           DateTime?         @db.Timestamp(6)
  created_at        DateTime?         @default(now()) @db.Timestamp(6)
  payment           payments?         @relation(fields: [payment_id], references: [id])
  branches          branches?         @relation(fields: [branch_id], references: [id])
  branch_id         String?           @db.Uuid

  @@index([member_id, created_at], map: "idx_notification_logs_member")
  @@index([member_id, is_read], map: "idx_notification_logs_unread")
  @@index([branch_id], map: "idx_notification_logs_branch")
  @@map("notification_logs")
  @@schema("public")
}

model payment_receipts {
  id             String    @id @db.VarChar(50)
  payment_id     String    @db.VarChar(50)
  receipt_number String    @unique @db.VarChar(100)
  member_id      String    @db.VarChar(50)
  invoice_data   Json      @db.JsonB
  pdf_path       String?   @db.VarChar(500)
  generated_at   DateTime? @default(now()) @db.Timestamp(6)
  generated_by   String?   @db.VarChar(50)
  payment        payments  @relation(fields: [payment_id], references: [id])

  @@index([payment_id], map: "idx_receipts_payment")
  @@index([member_id], map: "idx_receipts_member")
  @@map("payment_receipts")
  @@schema("public")
}

model payment_analytics {
  id                      BigInt                 @id @default(autoincrement())
  date                    DateTime               @db.Date
  gateway_type            payment_gateway_type
  payment_type            payment_type
  total_transactions      Int?                   @default(0)
  successful_transactions Int?                   @default(0)
  failed_transactions     Int?                   @default(0)
  total_amount            Decimal?               @default(0.00) @db.Decimal(12, 2)
  successful_amount       Decimal?               @default(0.00) @db.Decimal(12, 2)
  average_transaction_value Decimal?            @default(0.00) @db.Decimal(10, 2)
  success_rate            Decimal?               @default(0.00) @db.Decimal(5, 2)
  created_at              DateTime?              @default(now()) @db.Timestamp(6)

  @@unique([date, gateway_type, payment_type], map: "unique_analytics")
  @@index([date], map: "idx_analytics_date")
  @@index([gateway_type], map: "idx_analytics_gateway")
  @@map("payment_analytics")
  @@schema("public")
}

model change_request_workflow {
  id         String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  request_id String                  @db.Uuid
  status_from String?                @db.VarChar(20)
  status_to  String                  @db.VarChar(20)
  changed_by String                  @db.Uuid
  notes      String?                 @db.Text
  created_at DateTime?               @default(now()) @db.Timestamptz()
  request    trainer_change_requests @relation(fields: [request_id], references: [id], onDelete: Cascade)

  @@map("change_request_workflow")
  @@schema("public")
}

model member_trainer_preferences {
  id                         String                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  member_id                  String                                  @unique @db.Uuid
  preferred_specialties      String[]                                @default([]) @db.Text
  preferred_gender           member_trainer_preferences_gender?
  preferred_experience_level member_trainer_preferences_experience_level? @default(any)
  preferred_languages        String[]                                @default(["English"]) @db.Text
  avoid_trainer_ids          String[]                                @default([]) @db.Text
  max_hourly_rate            Decimal?                                @db.Decimal(10, 2)
  preferred_time_slots       Json?                                   @db.JsonB
  updated_at                 DateTime?                               @updatedAt @db.Timestamptz()

  @@map("member_trainer_preferences")
  @@schema("public")
}

model auto_assignment_config {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branch_id                 String    @unique @db.Uuid
  priority_factors          String[]  @default(["specialty_match", "availability", "rating", "experience", "price"]) @db.Text
  require_specialty_match   Boolean?  @default(true)
  require_availability      Boolean?  @default(true)
  max_price_threshold       Decimal?  @db.Decimal(10, 2)
  min_rating_threshold      Decimal?  @default(3.0) @db.Decimal(3, 2)
  min_experience_threshold  Int?      @default(1)
  enable_load_balancing     Boolean?  @default(true)
  max_utilization_threshold Int?      @default(80)
  allow_manual_assignment   Boolean?  @default(true)
  notify_on_no_match        Boolean?  @default(true)
  waitlist_on_no_match      Boolean?  @default(false)
  assignment_window_hours   Int?      @default(24)
  is_active                 Boolean?  @default(true)
  created_at                DateTime? @default(now()) @db.Timestamptz()
  updated_at                DateTime? @updatedAt @db.Timestamptz()
  branch                    branches  @relation(fields: [branch_id], references: [id])

  @@map("auto_assignment_config")
  @@schema("public")
}

model trainer_reviews {
  id                     String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trainer_id             String              @db.Uuid
  member_id              String              @db.Uuid
  assignment_id          String?             @db.Uuid
  rating                 Int
  review_text            String?             @db.Text
  professionalism_rating Int?
  knowledge_rating       Int?
  communication_rating   Int?
  is_verified            Boolean?            @default(false)
  is_featured            Boolean?            @default(false)
  created_at             DateTime?           @default(now()) @db.Timestamptz()
  updated_at             DateTime?           @updatedAt @db.Timestamptz()
  trainer                trainer_profiles    @relation(fields: [trainer_id], references: [id], onDelete: Cascade)
  assignment             trainer_assignments? @relation(fields: [assignment_id], references: [id], onDelete: SetNull)

  @@unique([trainer_id, member_id, assignment_id])
  @@map("trainer_reviews")
  @@schema("public")
}

model payment_transactions {
  id                       String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  member_id                String                       @db.Uuid
  trainer_id               String?                      @db.Uuid
  package_id               String?                      @db.Uuid
  assignment_id            String?                      @db.Uuid
  transaction_type         transaction_kind
  amount                   Decimal                      @db.Decimal(10, 2)
  currency                 String?                      @default("USD") @db.VarChar(3)
  payment_processor        String?                      @default("stripe") @db.VarChar(20)
  payment_method           String?                      @db.VarChar(20)
  processor_transaction_id String?                      @db.VarChar(255)
  processor_fee            Decimal?                     @default(0.00) @db.Decimal(10, 2)
  status                   payment_transaction_status?  @default(pending)
  payment_metadata         Json?                        @db.JsonB
  created_at               DateTime?                    @default(now()) @db.Timestamptz()
  updated_at               DateTime?                    @updatedAt @db.Timestamptz()
  trainer                  trainer_profiles?            @relation("trainer_transactions", fields: [trainer_id], references: [id], onDelete: SetNull)
  package                  trainer_packages?            @relation("package_transactions", fields: [package_id], references: [id], onDelete: SetNull)
  assignment               trainer_assignments?         @relation("assignment_transactions", fields: [assignment_id], references: [id], onDelete: SetNull)

  @@map("payment_transactions")
  @@schema("public")
}
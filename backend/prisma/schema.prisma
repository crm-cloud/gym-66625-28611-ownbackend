// Generated by Supabase to Prisma converter
// Generated at: 2025-10-22T06:33:48.794Z
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filterJson"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum assignment_status {
  scheduled
  in_progress
  completed
  cancelled
  no_show
}
enum attendance_status {
  checked_in
  checked_out
  no_show
  late
}
enum bonus_type {
  referral_signup
  referral_membership
  loyalty_points
}
enum certification_level {
  basic
  intermediate
  advanced
  expert
}
enum class_recurrence {
  none
  daily
  weekly
  monthly
}
enum class_status {
  scheduled
  completed
  cancelled
}
enum class_tag {
  strength
  cardio
  flexibility
  dance
  martial_arts
  water
  mind_body
}
enum device_status {
  online
  offline
  maintenance
}
enum email_template_type {
  welcome
  membership_renewal
  payment_reminder
  class_reminder
  birthday
  promotional
  system_notification
}
enum employment_type {
  full_time
  part_time
  contract
  intern
}
enum entry_method {
  biometric
  manual
  card
  mobile
}
enum equipment_condition {
  excellent
  good
  fair
  poor
}
enum equipment_status {
  operational
  maintenance
  out_of_order
  retired
}
enum feedback_priority {
  low
  medium
  high
  urgent
}
enum feedback_status {
  pending
  in_review
  resolved
  closed
}
enum feedback_type {
  facility
  trainer
  class
  equipment
  service
  general
}
enum freeze_status {
  pending
  approved
  rejected
  active
}
enum gender {
  male
  female
  other
  prefer_not_to_say
}
enum government_id_type {
  aadhaar
  pan
  passport
  voter_id
}
enum invoice_status {
  draft
  sent
  paid
  overdue
  cancelled
}
enum lead_priority {
  low
  medium
  high
  urgent
}
enum lead_source {
  website
  referral
  social
  walk_in
  phone
  email
  event
}
enum lead_status {
  new
  contacted
  qualified
  converted
  lost
}
enum locker_status {
  available
  occupied
  maintenance
  reserved
}
enum maintenance_status {
  pending
  in_progress
  completed
  cancelled
}
enum maintenance_type {
  routine
  repair
  deep_cleaning
  calibration
}
enum membership_status {
  active
  expired
  frozen
  cancelled
}
enum notification_type {
  announcement
  system
  membership
  referral
}
enum order_status {
  pending
  completed
  cancelled
  refunded
}
enum package_status {
  active
  paused
  expired
  cancelled
}
enum payment_method_type {
  cash
  card
  bank_transfer
  digital_wallet
  other
}
enum payment_status {
  pending
  completed
  failed
  refunded
}
enum plan_difficulty {
  beginner
  intermediate
  advanced
  expert
}
enum plan_status {
  draft
  active
  archived
}
enum redemption_type {
  pos_purchase
  membership_extension
  cash_equivalent
}
enum session_type {
  personal_training
  group_class
  consultation
  assessment
}
enum sms_template_type {
  welcome
  appointment_reminder
  payment_due
  class_cancelled
  promotional
  otp_verification
}
enum team_role {
  manager
  trainer
  staff
}
enum trainer_specialty {
  strength_training
  cardio
  yoga
  pilates
  crossfit
  martial_arts
  dance
  swimming
  rehabilitation
  nutrition
  weight_loss
  bodybuilding
  sports_performance
  senior_fitness
  youth_fitness
}
enum trainer_status {
  active
  inactive
  on_leave
  busy
}
enum transaction_status {
  completed
  pending
  cancelled
}
enum transaction_type {
  income
  expense
}
enum UserRole {
  SUPER_ADMIN    @map("super_admin")
  ADMIN          @map("admin")
  MANAGER        @map("manager")
  STAFF          @map("staff")
  TRAINER        @map("trainer")
  MEMBER         @map("member")
  
  @@map("user_roles")
}

// Role-based access levels for fine-grained permissions
enum PermissionLevel {
  READ           @map("read")
  WRITE          @map("write")
  DELETE         @map("delete")
  MANAGE         @map("manage")  // Full CRUD + user management
}

// Define feature modules for permissions
enum FeatureModule {
  DASHBOARD     @map("dashboard")
  MEMBERS       @map("members")
  TRAINERS      @map("trainers")
  CLASSES       @map("classes")
  SCHEDULING    @map("scheduling")
  PAYMENTS      @map("payments")
  REPORTS       @map("reports")
  SETTINGS      @map("settings")
  SYSTEM        @map("system")
}

model Achievements {
  id String @default(uuid()) @id
  name String @default("")
  description String @default("")
  category String @default("")
  iconUrl String
  criteria Json @default(dbgenerated("{}::jsonb"))
  pointsValue Int @default(0)
  rarity String @default("common")
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
@@map("achievements")
}
model AiInsights {
  id String @default(uuid()) @id
  userId String @default(uuid())
  branchId String @default(uuid())
  insightType String @default("")
  title String @default("")
  description String @default("")
  confidenceScore Decimal
  dataSources String
  recommendationData Json
  isApplied Boolean @default(false)
  appliedAt DateTime @db.Timestamptz
  effectivenessScore Decimal
  expiresAt DateTime @db.Timestamptz
  createdAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  user Profiles @relation(fields: [userId], references: [userId])
@@map("ai_insights")
}
model AnalyticsEvents {
  id String @default(uuid()) @id
  eventName String @default("")
  eventCategory String @default("")
  userId String @default(uuid())
  sessionId String
  properties Json @default(dbgenerated("'{}'::jsonb"))
  branchId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  user Profiles @relation(fields: [userId], references: [userId])
@@map("analytics_events")
}
model Announcements {
  id String @id @default(uuid())
  title String @default("")
  content String @default("")
  notificationType String @default("announcement")
  priority Int @default(1)
  targetRoles String
  branchIds String
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  expiresAt DateTime @db.Timestamptz
@@map("announcements")
}
model AttendanceRecords {
  id String @default(uuid()) @id
  userId String @default(uuid())
  branchId String @default(uuid())
  checkInTime DateTime @db.Timestamptz @default(now())
  checkOutTime DateTime @db.Timestamptz
  entryMethod String @default("manual")
  deviceId String @default(uuid())
  deviceLocation String
  status String @default("checked_in")
  notes String
  duration Int
  isLate Boolean @default(false)
  expectedCheckIn DateTime @db.Timestamptz
  approvedAt DateTime @db.Timestamptz
  location Json
  workShiftId String @default(uuid())
  membershipId String @default(uuid())
  classId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  class GymClasses @relation(fields: [classId], references: [id])
@@map("attendance_records")
}
model BiometricDevices {
  id String @default(uuid()) @id
  name String @default("")
  model String
  ipAddress String
  location String
  branchId String @default(uuid())
  status String @default("offline")
  lastSync DateTime @db.Timestamptz
  totalRecords Int @default(0)
  isActive Boolean @default(true)
  settings Json
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
@@map("biometric_devices")
}
model BranchAnalytics {
  id String @default(uuid()) @id
  branchId String @default(uuid())
  monthYear DateTime @db.Date @default(now())
  totalMembers Int @default(0)
  newMembers Int @default(0)
  churnedMembers Int @default(0)
  totalRevenue Decimal @default(0)
  membershipRevenue Decimal @default(0)
  trainingRevenue Decimal @default(0)
  retailRevenue Decimal @default(0)
  totalCheckIns Int @default(0)
  peakCapacityUsage Decimal @default(0)
  equipmentUtilization Decimal @default(0)
  trainerUtilization Decimal @default(0)
  memberSatisfactionAvg Decimal @default(0)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
@@map("branch_analytics")
}
model Branches {
  id String @default(uuid()) @id
  name String @default("")
  address Json @default(dbgenerated("{}::jsonb"))
  contact Json @default(dbgenerated("{}::jsonb"))
  hours Json @default(dbgenerated("{}::jsonb"))
  amenities String
  images String
  status String @default("active")
  capacity Int @default(0)
  currentMembers Int @default(0)
  managerId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  gymId String @default(uuid())
  gym Gyms @relation(fields: [gymId], references: [id])
  
  // Relations
  members Members[]
  trainers TrainerProfiles[]
  classes GymClasses[]
  dietPlans DietPlans[]
  emailTemplates EmailTemplates[]
  equipment Equipment[]
  feedback Feedback[]
  memberMemberships MemberMemberships[]
  membershipPlans MembershipPlans[]
  smsTemplates SmsTemplates[]
  transactions Transactions[]
  whatsappTemplates WhatsappTemplates[]
  workShifts WorkShifts[]
  workoutPlans WorkoutPlans[]
  
  // Additional Relations
  teamMembers TeamMembers[]
  trainerPackageRates TrainerPackageRates[]
  systemSettings SystemSettings[]
  trainerUtilization TrainerUtilization[]
  
  // Back-relations from Profiles
  profiles Profiles[]
  
  @@map("branches")
}
model ClassEnrollments {
  id String @default(uuid()) @id
  classId String @default(uuid())
  memberId String @default(uuid())
  enrolledAt DateTime @db.Timestamptz @default(now())
  status String @default("enrolled")
  notes String
  class GymClasses @relation(fields: [classId], references: [id])
  member Members @relation(fields: [memberId], references: [id])
@@map("class_enrollments")
}
model CreditTransactions {
  id String @id @default(uuid())
  userId String @default(uuid())
  amount Decimal @default(0)
  transactionType String @default("")
  description String
  referenceId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
@@map("credit_transactions")
}
model DashboardMetrics {
  id String @default(uuid()) @id
  branchId String @default(uuid())
  metricName String @default("")
  metricValue Decimal @default(0)
  metricDate DateTime @db.Date
  createdAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
@@map("dashboard_metrics")
}
model DietPlans {
  id String @default(uuid()) @id
  name String @default("")
  description String
  difficulty String @default("")
  status String @default("active")
  durationWeeks Int
  targetGoals String
  dietaryRestrictions String
  calorieTarget Int
  macros Json
  mealPlan Json
  branchId String @default(uuid())
  isTemplate Boolean @default(false)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  createdById String @default(uuid())
  creator Profiles @relation("DietPlanCreator", fields: [createdById], references: [userId])
@@map("diet_plans")
}
model DiscountCodes {
  id String @default(uuid()) @id
  code String @default("")
  description String
  discountType String @default("")
  discountValue Decimal @default(0)
  minPurchaseAmount Decimal @default(0)
  maxDiscountAmount Decimal
  usageLimit Int
  usageCount Int @default(0)
  validFrom DateTime @db.Date
  validUntil DateTime @db.Date
  isActive Boolean @default(true)
  applicableTo String @default("{}'::text[]")
  branchId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
@@map("discount_codes")
}
model EmailTemplates {
  id String @default(uuid()) @id
  name String @default("")
  type String @default("")
  subject String @default("")
  body String @default("")
  variables Json
  isActive Boolean @default(true)
  branchId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  createdById String @default(uuid())
  creator Profiles @relation("EmailTemplateCreator", fields: [createdById], references: [userId])
@@map("email_templates")
}
model Equipment {
  id String @default(uuid()) @id
  name String @default("")
  category String @default("")
  brand String
  model String
  serialNumber String
  purchaseDate DateTime @db.Date
  warrantyExpiry DateTime @db.Date
  status String @default("operational")
  condition String @default("good")
  location String
  branchId String @default(uuid())
  purchasePrice Decimal
  currentValue Decimal
  maintenanceSchedule Json
  specifications Json
  images String
  notes String
  lastMaintenanceDate DateTime @db.Date
  nextMaintenanceDate DateTime @db.Date
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
@@map("equipment")
}
model EquipmentAnalytics {
  id String @default(uuid()) @id
  equipmentId String @default(uuid())
  monthYear DateTime @db.Date @default(now())
  usageHours Int @default(0)
  maintenanceCost Decimal @default(0)
  downtimeHours Int @default(0)
  utilizationRate Decimal @default(0)
  memberSatisfaction Decimal @default(0)
  repairIncidents Int @default(0)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  equipment Equipment @relation(fields: [equipmentId], references: [id])
@@map("equipment_analytics")
}
model Feedback {
  id String @default(uuid()) @id
  memberId String @default(uuid())
  userId String @default(uuid())
  type String @default("")
  category String
  title String @default("")
  description String @default("")
  rating Int
  status String @default("pending")
  priority String @default("medium")
  branchId String @default(uuid())
  relatedEntityId String @default(uuid())
  relatedEntityName String
  attachments String
  tags String
  isAnonymous Boolean @default(false)
  resolvedAt DateTime @db.Timestamptz
  resolvedBy String @default(uuid())
  adminResponse String
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  member Members @relation(fields: [memberId], references: [id])
@@map("feedback")
}
model FeedbackResponses {
  id String @default(uuid()) @id
  feedbackId String @default(uuid())
  responderId String @default(uuid())
  responderName String @default("")
  responderRole String @default("")
  message String @default("")
  isPublic Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  feedback Feedback @relation(fields: [feedbackId], references: [id])
@@map("feedback_responses")
}
model GymClasses {
  id String @default(uuid()) @id
  name String @default("")
  description String
  startTime DateTime @db.Timestamptz @default(now())
  endTime DateTime @db.Timestamptz @default(now())
  recurrence String @default("none")
  trainerId String @default(uuid())
  branchId String @default(uuid())
  capacity Int @default(20)
  enrolledCount Int @default(0)
  tags String
  status String @default("scheduled")
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  trainer TrainerProfiles @relation(fields: [trainerId], references: [id])
@@map("gym_classes")
}
model GymUsage {
  id String @default(uuid()) @id
  gymId String @default(uuid())
  monthYear DateTime @db.Date @default(now())
  branchCount Int @default(0)
  trainerCount Int @default(0)
  memberCount Int @default(0)
  storageUsed BigInt @default(0)
  apiCalls Int @default(0)
  createdAt DateTime @db.Timestamptz @default(now())
  gym Gyms @relation(fields: [gymId], references: [id])
@@map("gym_usage")
}
model Gyms {
  id String @default(uuid()) @id
  name String @default("")
  subscriptionPlan String @default("basic")
  status String @default("active")
  settings Json @default(dbgenerated("'{}'::jsonb"))
  maxBranches Int @default(1)
  maxTrainers Int @default(5)
  maxMembers Int @default(100)
  billingEmail String
  billingAddress Json
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  
  // Relations
  branches Branches[]
  members Members[]
  trainers TrainerProfiles[]
  memberships MembershipPlans[]
  classes GymClasses[]
  equipment Equipment[]
  announcements Announcements[]
  notifications Notifications[]
  transactions Transactions[]
  profiles Profiles[]
  
  @@map("gyms")
}
model InvoiceItems {
  id String @default(uuid()) @id
  invoiceId String @default(uuid())
  name String @default("")
  quantity Int @default(1)
  unitPrice Decimal @default(0)
  total Decimal @default(0)
  createdAt DateTime @db.Timestamptz @default(now())
  tax Decimal @default("0")
  invoice Invoices @relation(fields: [invoiceId], references: [id])
@@map("invoice_items")
}
model Invoices {
  id String @default(uuid()) @id
  invoiceNumber String @default("")
  date DateTime @db.Date
  dueDate DateTime @db.Date @default(now())
  customerId String @default(uuid())
  customerName String @default("")
  customerEmail String
  subtotal Decimal @default(0)
  tax Decimal @default(0)
  discount Decimal @default(0)
  total Decimal @default(0)
  status String @default("draft")
  notes String
  branchId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  membershipId String @default(uuid())
  issueDate DateTime @db.Date
  branch Branches @relation(fields: [branchId], references: [id])
  customer Members @relation(fields: [customerId], references: [id])
  membership MemberMemberships @relation(fields: [membershipId], references: [id])
@@map("invoices")
}
model LeadNotes {
  id String @default(uuid()) @id
  leadId String @default(uuid())
  content String @default("")
  createdAt DateTime @db.Timestamptz @default(now())
  lead Leads @relation(fields: [leadId], references: [id])
@@map("lead_notes")
}
model LeadTasks {
  id String @default(uuid()) @id
  leadId String @default(uuid())
  title String @default("")
  description String
  assignedTo String @default(uuid())
  dueDate DateTime @db.Timestamptz @default(now())
  completed Boolean @default(false)
  completedAt DateTime @db.Timestamptz
  priority String @default("medium")
  type String @default("other")
  createdAt DateTime @db.Timestamptz @default(now())
  lead Leads @relation(fields: [leadId], references: [id])
@@map("lead_tasks")
}
model Leads {
  id String @default(uuid()) @id
  firstName String @default("")
  lastName String @default("")
  email String @default("")
  phone String @default("")
  status String @default("new")
  source String @default("")
  priority String @default("medium")
  interestedPrograms String
  message String
  assignedTo String @default(uuid())
  lastContactDate DateTime @db.Timestamptz
  nextFollowUpDate DateTime @db.Timestamptz
  referredBy String @default(uuid())
  conversionDate DateTime @db.Timestamptz
  estimatedValue Decimal
  tags String
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
@@map("leads")
}
model LockerAssignments {
  id String @default(uuid()) @id
  lockerId String @default(uuid())
  memberId String @default(uuid())
  assignedDate DateTime @db.Date
  expirationDate DateTime @db.Date
  releaseDate DateTime @db.Date
  monthlyFee Decimal @default(0)
  status String @default("active")
  notes String
  createdAt DateTime @db.Timestamptz @default(now())
  locker Lockers @relation(fields: [lockerId], references: [id])
  member Members @relation(fields: [memberId], references: [id])
@@map("locker_assignments")
}
model LockerSizes {
  id String @default(uuid()) @id
  name String @default("")
  dimensions String @default("")
  monthlyFee Decimal @default(0)
  createdAt DateTime @db.Timestamptz @default(now())
@@map("locker_sizes")
}
model Lockers {
  id String @default(uuid()) @id
  name String @default("")
  number String @default("")
  branchId String @default(uuid())
  sizeId String @default(uuid())
  status String @default("available")
  assignedMemberId String @default(uuid())
  assignedDate DateTime @db.Date
  expirationDate DateTime @db.Date
  releaseDate DateTime @db.Date
  monthlyFee Decimal @default(0)
  notes String
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  assignedMember Members @relation(fields: [assignedMemberId], references: [id])
  branch Branches @relation(fields: [branchId], references: [id])
  size LockerSizes @relation(fields: [sizeId], references: [id])
@@map("lockers")
}
model MaintenanceRecords {
  id String @default(uuid()) @id
  equipmentId String @default(uuid())
  issueDescription String @default("")
  status String @default("pending")
  priority String @default("medium")
  scheduledDate DateTime @db.Timestamptz
  completionDate DateTime @db.Timestamptz
  cost Decimal @default(0)
  notes String
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  createdById String @default(uuid())
  technicianId String @default(uuid())
  
  // Relations
  createdBy Profiles @relation("CreatedMaintenanceRecords", fields: [createdById], references: [userId])
  technician Profiles @relation("TechnicianMaintenanceRecords", fields: [technicianId], references: [userId])
  equipment Equipment @relation(fields: [equipmentId], references: [id])
}
model MemberAchievements {
  id String @default(uuid()) @id
  userId String @default(uuid())
  achievementId String @default(uuid())
  earnedDate DateTime @db.Date
  progressData Json
  createdAt DateTime @db.Timestamptz @default(now())
  achievement Achievements @relation(fields: [achievementId], references: [id])
  user Profiles @relation(fields: [userId], references: [userId])
@@map("member_achievements")
}
model MemberAnalytics {
  id String @default(uuid()) @id
  userId String @default(uuid())
  monthYear DateTime @db.Date @default(now())
  checkInsCount Int @default(0)
  classesAttended Int @default(0)
  personalTrainingSessions Int @default(0)
  updatedAt DateTime @db.Timestamptz @default(now())
@@map("member_credits")
}
model MemberDietPlans {
  id String @default(uuid()) @id
  userId String @default(uuid())
  dietPlanId String @default(uuid())
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  progress Json
  notes String
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  assignedById String @default(uuid())
  assignedByUser Profiles @relation("DietPlanAssigner", fields: [assignedById], references: [userId])
  dietPlan DietPlans @relation(fields: [dietPlanId], references: [id])
  user Profiles @relation("MemberDietPlanUser", fields: [userId], references: [userId])
@@map("member_diet_plans")
}
model MemberDiscountUsage {
  id String @default(uuid()) @id
  userId String @default(uuid())
  discountCodeId String @default(uuid())
  orderId String
  invoiceId String @default(uuid())
  discountAmount Decimal @default(0)
  usedAt DateTime @db.Timestamptz @default(now())
  discountCode DiscountCodes @relation(fields: [discountCodeId], references: [id])
  invoice Invoices @relation(fields: [invoiceId], references: [id])
@@map("member_discount_usage")
}
model MemberGoals {
  id String @id @default(uuid())
  userId String @default(uuid())
  title String @default("")
  description String
  targetValue Decimal
  targetUnit String
  currentValue Decimal @default(0)
  targetDate DateTime @db.Date
  category String
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  
  // Relations
  user Profiles @relation(fields: [userId], references: [userId])
  
  // Back-relations
  progressEntries ProgressEntries[]
  progressPhotos ProgressPhotos[]
  
  @@map("member_goals")
}
model MemberMeasurements {
  id String @default(uuid()) @id
  memberId String @default(uuid())
  weight Decimal
  height Decimal
  bodyFatPercentage Decimal
  muscleMass Decimal
  bmi Decimal
  chest Decimal
  waist Decimal
  hips Decimal
  arms Decimal
  thighs Decimal
  restingHeartRate Int
  bloodPressureSystolic Int
  bloodPressureDiastolic Int
  notes String
  measuredDate DateTime @db.Date
  createdAt DateTime @db.Timestamptz @default(now())
  membershipId String @default(uuid())
  measuredById String @default(uuid())
  measuredByUser Profiles @relation("MemberMeasurementsMeasuredBy", fields: [measuredById], references: [userId])
  member Members @relation("MemberMeasurementsMember", fields: [memberId], references: [id])
  membership MemberMemberships @relation("MemberMeasurementsMembership", fields: [membershipId], references: [id])
@@map("member_measurements")
}
model MemberMemberships {
  id String @id @default(uuid())
  userId String @default(uuid())
  startDate DateTime @db.Date @default(now())
  endDate DateTime @db.Date @default(now())
  status String @default("active")
  paymentAmount Decimal @default(0)
  paymentStatus String @default("pending")
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branchId String @default(uuid())
  notes String
  discountPercent Decimal @default(0)
  discountAmount Decimal @default(0)
  gstEnabled Boolean @default(false)
  gstAmount Decimal @default(0)
  finalAmount Decimal @default(0)
  membershipPlanId String @default(uuid())
  assignedById String @default(uuid())
  assignedByUser Profiles @relation("MemberMembershipsAssignedBy", fields: [assignedById], references: [userId])
  membershipPlan MembershipPlans @relation("MemberMembershipsPlan", fields: [membershipPlanId], references: [id])
  
  // Back-relations
  member Members @relation(fields: [userId], references: [id])
  measurements MemberMeasurements[] @relation("MemberMeasurementsMembership")
  referrals Referrals[]
  
  @@map("member_memberships")
}
model MemberWorkoutPlans {
  id String @default(uuid()) @id
  userId String @default(uuid())
  workoutPlanId String @default(uuid())
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  progress Json
  notes String
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  assignedById String @default(uuid())
  assignedByUser Profiles @relation("WorkoutPlanAssigner", fields: [assignedById], references: [userId])
  user Profiles @relation("MemberWorkoutPlanUser", fields: [userId], references: [userId])
  workoutPlan WorkoutPlans @relation("MemberWorkoutPlanDetails", fields: [workoutPlanId], references: [id])
@@map("member_workout_plans")
}
model Members {
  id String @default(uuid()) @id
  userId String @default(uuid()) @unique
  fullName String @default("")
  email String @default("")
  phone String
  dateOfBirth DateTime @db.Date
  gender String @default("")
  address String
  city String
  state String
  zipCode String
  country String
  emergencyContactName String
  emergencyContactPhone String
  emergencyContactRelation String
  medicalConditions String
  allergies String
  medications String
  bloodGroup String
  height Decimal
  weight Decimal
  bmi Decimal
  fitnessGoals String
  preferredWorkoutTime String
  membershipStartDate DateTime @db.Date
  membershipEndDate DateTime @db.Date
  membershipStatus String @default("active")
  membershipType String
  branchId String @default(uuid())
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  
  // Relations
  branch Branches @relation(fields: [branchId], references: [id])
  userProfile Profiles @relation(fields: [userId], references: [userId])
  
  // Back-relations
  classEnrollments ClassEnrollments[]
  dietPlans MemberDietPlans[]
  feedback Feedback[]
  measurements MemberMeasurements[] @relation("MemberMeasurementsMember")
  memberships MemberMemberships[]
  payments Payments[]
  transactions Transactions[]
  trainerChangeRequests TrainerChangeRequests[] @relation("MemberChangeRequests")
  workoutPlans MemberWorkoutPlans[]
  
  @@map("members")
}
model MembershipFreezeRequests {
  id String @id @default(uuid())
  userId String @default(uuid())
  membershipId String @default(uuid())
  reason String @default("")
  requestedDays Int @default(0)
  freezeFee Decimal @default(0.00)
  status String @default("pending")
  adminNotes String
  approvedAt DateTime @db.Timestamptz
  freezeStartDate DateTime @db.Date
  freezeEndDate DateTime @db.Date
  createdAt DateTime @db.Timestamptz @default(now())
  membership MemberMemberships @relation(fields: [membershipId], references: [id])
@@map("membership_freeze_requests")
}
model MembershipPlans {
  id String @id @default(uuid())
  name String @default("")
  description String
  price Decimal @default(0)
  durationMonths Int @default(0)
  features String
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
@@map("membership_plans")
}
model NotificationPreferences {
  id String @default(uuid()) @id
  userId String @default(uuid())
  emailNotifications Boolean @default(true)
  smsNotifications Boolean @default(false)
  pushNotifications Boolean @default(true)
  marketingEmails Boolean @default(false)
  workoutReminders Boolean @default(true)
  classReminders Boolean @default(true)
  paymentReminders Boolean @default(true)
  achievementNotifications Boolean @default(true)
  socialNotifications Boolean @default(false)
  preferredContactTimeStart DateTime @db.Time @default("09:00:00")
  preferredContactTimeEnd DateTime @db.Time @default("18:00:00")
  timezone String @default("UTC")
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  user Profiles @relation(fields: [userId], references: [userId])
@@map("notification_preferences")
}
model OrderItems {
  id String @id @default(uuid())
  orderId String @default(uuid())
  productId String @default(uuid())
  quantity Int @default(0)
  unitPrice Decimal @default(0)
  totalPrice Decimal @default(0)
  createdAt DateTime @db.Timestamptz @default(now())
  order Orders @relation(fields: [orderId], references: [id])
  product Products @relation(fields: [productId], references: [id])
@@map("order_items")
}
model Orders {
  id String @id @default(uuid())
  userId String @default(uuid())
  orderNumber String @default("")
  totalAmount Decimal @default(0)
  creditUsed Decimal @default(0.00)
  cashAmount Decimal @default(0.00)
  status String @default("pending")
  paymentMethod String
  paymentReference String
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
@@map("orders")
}
model PaymentGatewayConfigs {
  id String @default(uuid()) @id
  gymId String @default(uuid())
  branchId String @default(uuid())
  provider String @default("")
  apiKey String
  apiSecret String
  merchantId String
  saltKey String
  accessCode String
  isActive Boolean @default(false)
  isTestMode Boolean @default(true)
  webhookSecret String
  webhookUrl String
  allowedPaymentMethods Json
  autoCapture Boolean @default(true)
  currency String @default("INR")
  paymentGatewayFeePercent Decimal @default(2.0)
  gstOnGatewayFee Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  gym Gyms @relation(fields: [gymId], references: [id])
@@map("payment_gateway_configs")
}
model PaymentGatewayTransactions {
  id String @default(uuid()) @id
  gatewayConfigId String @default(uuid())
  provider String @default("")
  orderId String @default("")
  gatewayOrderId String
  gatewayPaymentId String
  amount Decimal @default(0)
  currency String @default("INR")
  gatewayFee Decimal @default(0)
  gstAmount Decimal @default(0)
  netAmount Decimal
  status String @default("pending")
  paymentMethod String
  customerId String @default(uuid())
  customerEmail String
  customerPhone String
  customerName String
  invoiceId String @default(uuid())
  membershipId String @default(uuid())
  gatewayResponse Json
  webhookData Json
  errorMessage String
  initiatedAt DateTime @db.Timestamptz @default(now())
  completedAt DateTime @db.Timestamptz
  failedAt DateTime @db.Timestamptz
  branchId String @default(uuid())
  gymId String @default(uuid())
  discountCode String
  discountAmount Decimal @default(0)
  rewardsUsed Decimal @default(0)
  branch Branches @relation(fields: [branchId], references: [id])
  gatewayConfig PaymentGatewayConfigs @relation(fields: [gatewayConfigId], references: [id])
  gym Gyms @relation(fields: [gymId], references: [id])
  invoice Invoices @relation(fields: [invoiceId], references: [id])
  membership MemberMemberships @relation(fields: [membershipId], references: [id])
@@map("payment_gateway_transactions")
}
model PaymentMethods {
  id String @default(uuid()) @id
  name String @default("")
  type String @default("")
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
@@map("payment_methods")
}
model Payments {
  id String @default(uuid()) @id
  invoiceId String @default(uuid())
  amount Decimal @default(0)
  paymentMethod String @default("")
  paymentDate DateTime @db.Date
  reference String
  notes String
  status String @default("completed")
  discountCode String
  rewardsUsed Decimal @default(0.00)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  invoice Invoices @relation(fields: [invoiceId], references: [id])
@@map("payments")
}
model Permissions {
  id String @default(uuid()) @id
  name String @default("")
  displayName String @default("")
  description String
  module String @default("")
  category String @default("")
  isSystem Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
@@map("permissions")
}
model Products {
  id String @id @default(uuid())
  name String @default("")
  description String
  price Decimal @default(0)
  memberPrice Decimal
  category String @default("")
  imageUrl String
  stockQuantity Int @default(0)
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
@@map("products")
}
model Profile {
  id                String    @id @default(uuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
  
  // Personal Information
  firstName         String
  lastName          String
  fullName          String    @default("")
  avatarUrl         String?
  dateOfBirth       DateTime? @db.Date
  gender            String?
  
  // Contact Information
  address           Json?     @default(dbgenerated("{}"))
  city              String?
  state             String?
  country           String?
  pincode           String?
  phone             String?
  email             String?   @default("")
  
  // Emergency Contact
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  
  // System Fields
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime? @db.Timestamptz
  
  // Relations
  branchId          String?   @default(uuid())
  branch            Branches? @relation(fields: [branchId], references: [id])
  
  // Role-specific relations
  memberProfile     MemberProfile?
  trainerProfile    TrainerProfile?
  staffProfile      StaffProfile?
  
  // Audit fields
  createdAt         DateTime  @default(now()) @db.Timestamptz
  updatedAt         DateTime  @updatedAt @db.Timestamptz
  
  @@map("profiles")
}

// Role-specific profile extensions
model MemberProfile {
  id                String    @id @default(uuid())
  profileId         String    @unique
  profile           Profile   @relation(fields: [profileId], references: [id])
  
  // Member-specific fields
  membershipNumber  String?   @unique
  joinDate          DateTime  @default(now()) @db.Date
  membershipStatus  String    @default("active")
  height            Float?
  weight            Float?
  bloodGroup        String?
  medicalConditions String?
  fitnessGoals      String?
  
  // Relations
  subscriptions     Subscription[]
  bookings          Booking[]
  
  @@map("member_profiles")
}

model TrainerProfile {
  id                String    @id @default(uuid())
  profileId         String    @unique
  profile           Profile   @relation(fields: [profileId], references: [id])
  
  // Trainer-specific fields
  bio               String?
  specialties       String[]
  certifications    String[]
  experienceYears   Int       @default(0)
  hourlyRate        Float?
  isAvailable       Boolean   @default(true)
  
  // Relations
  packages          TrainingPackage[]
  bookings          Booking[]
  
  @@map("trainer_profiles")
}

model StaffProfile {
  id                String    @id @default(uuid())
  profileId         String    @unique
  profile           Profile   @relation(fields: [profileId], references: [id])
  
  // Staff-specific fields
  employeeId        String    @unique
  department        String
  position          String
  hireDate          DateTime  @db.Date
  reportsTo         String?   // Manager's employeeId
  
  // Relations
  managedMembers    MemberProfile[]
  
  @@map("staff_profiles")
}
model ProgressEntries {
  id String @id @default(uuid())
  userId String @default(uuid())
  goalId String @default(uuid())
  measurementValue Decimal @default(0)
  notes String
  photoUrl String
  recordedDate DateTime @db.Date
  createdAt DateTime @db.Timestamptz @default(now())
  goal MemberGoals @relation(fields: [goalId], references: [id])
@@map("progress_entries")
}
model ProgressPhotos {
  id String @default(uuid()) @id
  userId String @default(uuid())
  goalId String @default(uuid())
  photoUrl String @default("")
  photoType String @default("progress")
  measurements Json
  notes String
  isPublic Boolean @default(false)
  takenDate DateTime @db.Date
  createdAt DateTime @db.Timestamptz @default(now())
  goal MemberGoals @relation(fields: [goalId], references: [id])
  user Profiles @relation(fields: [userId], references: [userId])
@@map("progress_photos")
}
model ReferralAnalytics {
  id String @default(uuid()) @id
  userId String @default(uuid())
  periodStart DateTime @db.Date @default(now())
  periodEnd DateTime @db.Date @default(now())
  totalReferrals Int @default(0)
  completedReferrals Int @default(0)
  pendingReferrals Int @default(0)
  totalBonusEarned Decimal @default(0)
  conversionRate Decimal
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
@@map("referral_analytics")
}
model ReferralBonusHistory {
  id String @default(uuid()) @id
  referralId String @default(uuid())
  bonusType String @default("")
  amount Decimal @default(0)
  processedBy String @default(uuid())
  processedAt DateTime @db.Timestamptz @default(now())
  notes String
  createdAt DateTime @db.Timestamptz @default(now())
  referral Referrals @relation(fields: [referralId], references: [id])
@@map("referral_bonus_history")
}
model ReferralBonuses {
  id String @id @default(uuid())
  referralId String @default(uuid())
  userId String @default(uuid())
  bonusType String @default("")
  amount Decimal @default(0)
  description String
  isRedeemed Boolean @default(false)
  createdAt DateTime @db.Timestamptz @default(now())
  redeemedAt DateTime @db.Timestamptz
  referral Referrals @relation(fields: [referralId], references: [id])
@@map("referral_bonuses")
}
model ReferralSettings {
  id String @id @default(uuid())
  signupBonusAmount Decimal @default(0.00)
  membershipBonusAmount Decimal @default(0.00)
  isActive Boolean @default(true)
  expiryDays Int @default(30)
  minPurchaseAmount Decimal @default(0.00)
  maxReferralsPerUser Int
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
@@map("referral_settings")
}
model Referrals {
  id String @id @default(uuid())
  referrerId String @default(uuid())
  referredEmail String @default("")
  referredId String @default(uuid())
  referralCode String @default("")
  status String @default("pending")
  signupBonusAmount Decimal @default(0.00)
  membershipBonusAmount Decimal @default(0.00)
  createdAt DateTime @db.Timestamptz @default(now())
  completedAt DateTime @db.Timestamptz
  membershipId String @default(uuid())
  convertedAt DateTime @db.Timestamptz
  membership MemberMemberships @relation(fields: [membershipId], references: [id])
@@map("referrals")
}
model RolePermissions {
  id String @default(uuid()) @id
  roleId String @default(uuid())
  permissionId String @default(uuid())
  grantedAt DateTime @db.Timestamptz @default(now())
  grantedBy String @default(uuid())
  permission Permissions @relation(fields: [permissionId], references: [id])
  role Roles @relation(fields: [roleId], references: [id])
@@map("role_permissions")
}
model Roles {
  id String @default(uuid()) @id
  name String @default("")
  displayName String @default("")
  description String
  color String @default("#6366f1")
  isSystem Boolean @default(false)
  scope String @default("branch")
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
@@map("roles")
}
model SmsTemplates {
  id String @default(uuid()) @id
  name String @default("")
  type String @default("")
  content String @default("")
  variables Json
  isActive Boolean @default(true)
  branchId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  createdById String @default(uuid())
  creator Profiles @relation("SmsTemplateCreator", fields: [createdById], references: [userId])
@@map("sms_templates")
}
model SubscriptionPlans {
  id String @default(uuid()) @id
  name String @default("")
  price Decimal @default(0)
  billingCycle String @default("monthly")
  maxBranches Int @default(1)
  maxTrainers Int @default(5)
  maxMembers Int @default(100)
  features Json
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
@@map("subscription_plans")
}
model SystemBackups {
  id String @default(uuid()) @id
  backupType String @default("")
  status String @default("pending")
  filePath String
  fileSize BigInt
  compressionType String @default("gzip")
  backupData Json @default(dbgenerated("'{}'::jsonb"))
  startedAt DateTime @db.Timestamptz @default(now())
  completedAt DateTime @db.Timestamptz
  errorMessage String
  retentionUntil DateTime @db.Timestamptz
@@map("system_backups")
}
model SystemEvents {
  id String @default(uuid()) @id
  eventType String @default("")
  eventCategory String @default("")
  title String @default("")
  description String
  metadata Json @default(dbgenerated("'{}'::jsonb"))
  severity Int @default(1)
  resolved Boolean @default(false)
  resolvedAt DateTime @db.Timestamptz
  resolvedBy String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
@@map("system_events")
}
model SystemSettings {
  id String @default(uuid()) @id
  key String @default("")
  value Json @default(dbgenerated("{}::jsonb"))
  category String @default("")
  description String
  isEncrypted Boolean @default(false)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branchId String @default(uuid())
  branch Branches @relation(fields: [branchId], references: [id])
@@map("system_settings")
}
model TeamMembers {
  id String @default(uuid()) @id
  userId String @default(uuid())
  employeeId String @default("")
  department String @default("")
  position String @default("")
  employmentType String @default("full_time")
  hireDate DateTime @db.Date
  salary Decimal
  hourlyRate Decimal
  branchId String @default(uuid())
  managerId String @default(uuid())
  skills String
  certifications String
  performanceRating Decimal
  lastReviewDate DateTime @db.Date
  nextReviewDate DateTime @db.Date
  emergencyContact Json
  bankDetails Json
  documents Json
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  manager Profiles @relation("TeamMemberManager", fields: [managerId], references: [userId])
  user Profiles @relation("TeamMemberUser", fields: [userId], references: [userId])
@@map("team_members")
}
model TrainerAnalytics {
  id String @default(uuid()) @id
  trainerId String @default(uuid())
  monthYear DateTime @db.Date @default(now())
  sessionsConducted Int @default(0)
  totalRevenue Decimal @default(0)
  avgSessionRating Decimal @default(0)
  membersTrained Int @default(0)
  newMembersAcquired Int @default(0)
  retentionRate Decimal @default(0)
  cancellationRate Decimal @default(0)
  punctualityScore Decimal @default(0)
  specialtiesDemand Json @default(dbgenerated("'{}'::jsonb"))
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  trainer TrainerProfiles @relation(fields: [trainerId], references: [userId])
@@map("trainer_analytics")
}
model TrainerAssignments {
  id String @default(uuid()) @id
  trainerId String @default(uuid())
  memberId String @default(uuid())
  sessionType String @default("personal_training")
  scheduledDate DateTime @db.Timestamptz @default(now())
  durationMinutes Int @default(60)
  status String @default("scheduled")
  location String
  notes String
  memberGoals String
  sessionPlan Json
  completedExercises Json
  memberFeedback String
  trainerNotes String
  rating Int
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  createdById String @default(uuid())
  
  // Relations
  creator Profiles @relation("TrainerAssignmentCreator", fields: [createdById], references: [userId])
  member Members @relation("TrainerAssignmentMember", fields: [memberId], references: [id])
  trainer TrainerProfiles @relation("TrainerAssignmentTrainer", fields: [trainerId], references: [id])
  
  @@map("trainer_assignments")
}
model TrainerAvailability {
  id String @default(uuid()) @id
  trainerId String @default(uuid())
  dayOfWeek Int @default(0)
  startTime DateTime @db.Time @default(now())
  endTime DateTime @db.Time @default(now())
  isAvailable Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  trainer TrainerProfiles @relation(fields: [trainerId], references: [id])
@@map("trainer_availability")
}
model TrainerCertifications {
  id String @default(uuid()) @id
  trainerId String @default(uuid())
  name String @default("")
  issuingOrganization String @default("")
  level String @default("")
  issueDate DateTime @db.Date @default(now())
  expiryDate DateTime @db.Date
  verified Boolean @default(false)
  createdAt DateTime @db.Timestamptz @default(now())
  trainer TrainerProfiles @relation(fields: [trainerId], references: [id])
@@map("trainer_certifications")
}
model TrainerChangeRequests {
  id String @default(uuid()) @id
  memberId String @default(uuid())
  currentTrainerId String @default(uuid())
  requestedTrainerId String @default(uuid())
  reason String @default("")
  description String
  urgency String @default("medium")
  status String @default("pending")
  approvedAt DateTime @db.Timestamptz
  rejectionReason String
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  approvedById String @default(uuid())
  approvedByUser Profiles @relation("TrainerChangeApprover", fields: [approvedById], references: [userId])
  currentTrainer TrainerProfiles @relation("CurrentTrainerChanges", fields: [currentTrainerId], references: [id])
  member Members @relation("MemberChangeRequests", fields: [memberId], references: [id])
  requestedTrainer TrainerProfiles @relation("RequestedTrainerChanges", fields: [requestedTrainerId], references: [id])
@@map("trainer_change_requests")
}
model TrainerPackageRates {
  id String @default(uuid()) @id
  trainerId String @default(uuid())
  branchId String @default(uuid())
  packageName String @default("")
  sessionCount Int @default(0)
  price Decimal @default(0)
  durationDays Int
  description String
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  trainer Profiles @relation(fields: [trainerId], references: [userId])
@@map("trainer_package_rates")
}
model TrainerPackages {
  id String @default(uuid()) @id
  trainerId String @default(uuid())
  memberId String @default(uuid())
  packageName String @default("")
  totalSessions Int @default(0)
  usedSessions Int @default(0)
  pricePerSession Decimal @default(0)
  totalAmount Decimal @default(0)
  status String @default("active")
  purchaseDate DateTime @db.Date
  expiryDate DateTime @db.Date
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  member Profiles @relation(fields: [memberId], references: [userId])
  trainer TrainerProfiles @relation(fields: [trainerId], references: [userId])
@@map("trainer_packages")
}
model TrainerProfiles {
  id String @default(uuid()) @id
  userId String @default(uuid()) @unique
  employeeId String @default("")
  branchId String @default(uuid())
  fullName String @default("")
  email String @default("")
  phone String
  avatar String
  dateOfBirth DateTime @db.Date
  joinDate DateTime @db.Date
  specialties String
  experience Int @default(0)
  certification String
  isActive Boolean @default(true)
  rating Decimal @default(0)
  totalSessions Int @default(0)
  totalClients Int @default(0)
  availability Json
  socialMedia Json
  notes String
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  
  // Relations
  branch Branches @relation(fields: [branchId], references: [id])
  userProfile Profiles @relation(fields: [userId], references: [userId])
  
  // Back-relations
  assignedClasses GymClasses[]
  packages TrainerPackages[]
  trainerAssignments TrainerAssignments[] @relation("TrainerAssignmentTrainer")
  changeRequestsAsCurrent TrainerChangeRequests[] @relation("CurrentTrainerChanges")
  changeRequestsAsRequested TrainerChangeRequests[] @relation("RequestedTrainerChanges")
  utilizations TrainerUtilization[]
  certifications TrainerCertifications[]
  availabilitySlots TrainerAvailability[]
  analytics TrainerAnalytics[]
  packageRates TrainerPackageRates[]
  memberChangeRequests TrainerChangeRequests[] @relation("MemberChangeRequests")
  
  @@map("trainer_profiles")
}
model TrainerUtilization {
  id String @default(uuid()) @id
  trainerId String @default(uuid())
  period String @default("")
  date DateTime @db.Date @default(now())
  totalAvailableHours Int @default(0)
  bookedHours Int @default(0)
  utilizationRate Decimal @default(0)
  scheduledSessions Int @default(0)
  completedSessions Int @default(0)
  cancelledSessions Int @default(0)
  noShowSessions Int @default(0)
  totalRevenue Decimal @default(0)
  averageSessionValue Decimal @default(0)
  averageRating Decimal @default(0)
  punctualityScore Decimal @default(0)
  createdAt DateTime @db.Timestamptz @default(now())
  trainer TrainerProfiles @relation(fields: [trainerId], references: [id])
@@map("trainer_utilization")
}
model TransactionCategories {
  id String @default(uuid()) @id
  name String @default("")
  type String @default("")
  color String @default("#000000")
  icon String @default("circle")
  description String
  isActive Boolean @default(true)
  createdAt DateTime @db.Timestamptz @default(now())
  
  // Back-relations
  transactions Transactions[]
  
  @@map("transaction_categories")
}
model Transactions {
  id String @default(uuid()) @id
  date DateTime @db.Date
  type String @default("")
  categoryId String @default(uuid())
  amount Decimal @default(0)
  description String @default("")
  paymentMethodId String @default(uuid())
  reference String
  memberId String @default(uuid())
  status String @default("completed")
  branchId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  category TransactionCategories @relation(fields: [categoryId], references: [id])
  member Members @relation(fields: [memberId], references: [id])
  paymentMethod PaymentMethods @relation(fields: [paymentMethodId], references: [id])
@@map("transactions")
}
model UserNotifications {
  id String @id @default(uuid())
  userId String @default(uuid())
  announcementId String @default(uuid())
  isRead Boolean @default(false)
  readAt DateTime @db.Timestamptz
  createdAt DateTime @db.Timestamptz @default(now())
  announcement Announcements @relation(fields: [announcementId], references: [id])
@@map("user_notifications")
}
model UserRoles {
  id String @default(uuid()) @id
  userId String @default(uuid())
  role String @default("")
  branchId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  teamRole String
@@map("user_roles")
}
model WhatsappTemplates {
  id String @default(uuid()) @id
  name String @default("")
  category String @default("")
  event String @default("")
  templateType String @default("text")
  headerText String
  bodyText String @default("")
  footerText String
  buttons Json
  variables Json
  isActive Boolean @default(true)
  language String @default("en")
  whatsappTemplateId String
  status String @default("draft")
  branchId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
@@map("whatsapp_templates")
}
model WorkShifts {
  id String @default(uuid()) @id
  name String @default("")
  startTime DateTime @db.Time @default(now())
  endTime DateTime @db.Time @default(now())
  branchId String @default(uuid())
  days String
  userIds String
  isActive Boolean @default(true)
  gracePeriod Int @default(15)
  lateThreshold Int @default(30)
  breakDuration Int @default(60)
  minimumHours Decimal @default(8)
  maximumHours Decimal @default(12)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
@@map("work_shifts")
}
model WorkoutPlans {
  id String @default(uuid()) @id
  name String @default("")
  description String
  difficulty String @default("")
  status String @default("active")
  durationWeeks Int
  targetGoals String
  equipmentNeeded String
  exercises Json
  branchId String @default(uuid())
  isTemplate Boolean @default(false)
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  branch Branches @relation(fields: [branchId], references: [id])
  createdById String @default(uuid())
  creator Profiles @relation("WorkoutPlanCreator", fields: [createdById], references: [userId])
@@map("workout_plans")
}
enum aal_level {
  aal1
  aal2
  aal3
}
enum code_challenge_method {
  s256
  plain
}
enum factor_status {
  unverified
  verified
}
enum factor_type {
  totp
  webauthn
  phone
}
enum oauth_authorization_status {
  pending
  approved
  denied
  expired
}
enum oauth_client_type {
  public
  confidential
}
enum oauth_registration_type {
  dynamic
  manual
}
enum oauth_response_type {
  code
}
enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token
}
model AuditLogEntries {
  instanceId String @default(uuid())
  id String @default(uuid()) @id
  payload Json
  createdAt DateTime @db.Timestamptz
  ipAddress String @default("'::character varying")
  @@schema("auth")
  @@map("audit_log_entries")
}
model FlowState {
  id String @default(uuid()) @id
  userId String @default(uuid())
  authCode String @default("")
  codeChallengeMethod String @default("")
  codeChallenge String @default("")
  providerType String @default("")
  providerAccessToken String
  providerRefreshToken String
  createdAt DateTime @db.Timestamptz
  updatedAt DateTime @db.Timestamptz
  authenticationMethod String @default("")
  authCodeIssuedAt DateTime @db.Timestamptz
  @@schema("auth")
  @@map("flow_state")
}
model Identities {
  providerId String @default("")
  userId String @default(uuid())
  identityData Json @default(dbgenerated("{}::jsonb"))
  provider String @default("")
  lastSignInAt DateTime @db.Timestamptz
  createdAt DateTime @db.Timestamptz
  updatedAt DateTime @db.Timestamptz
  email String
  id String @default(uuid()) @id
  @@schema("auth")
  @@map("identities")
}
model Instances {
  id String @default(uuid()) @id
  uuid String @default(uuid())
  rawBaseConfig String
  createdAt DateTime @db.Timestamptz
  updatedAt DateTime @db.Timestamptz
  @@schema("auth")
  @@map("instances")
}
model MfaAmrClaims {
  sessionId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  authenticationMethod String @default("")
  id String @default(uuid()) @id
  @@schema("auth")
  @@map("mfa_amr_claims")
}
model MfaChallenges {
  id String @default(uuid()) @id
  factorId String @default(uuid())
  createdAt DateTime @db.Timestamptz @default(now())
  verifiedAt DateTime @db.Timestamptz
  ipAddress String @default("")
  otpCode String
  webAuthnSessionData Json
  @@schema("auth")
  @@map("mfa_challenges")
}
model MfaFactors {
  id String @default(uuid()) @id
  userId String @default(uuid())
  friendlyName String
  factorType String @default("")
  status String @default("")
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  secret String
  phone String
  lastChallengedAt DateTime @db.Timestamptz
  webAuthnCredential Json
  webAuthnAaguid String @default(uuid())
  @@schema("auth")
  @@map("mfa_factors")
}
model OauthAuthorizations {
  id String @default(uuid()) @id
  authorizationId String @default("")
  clientId String @default(uuid())
  userId String @default(uuid())
  redirectUri String @default("")
  scope String @default("")
  state String
  resource String
  codeChallenge String
  codeChallengeMethod String
  responseType String @default("code'::auth.oauth_response_type")
  status String @default("pending'::auth.oauth_authorization_status")
  authorizationCode String
  createdAt DateTime @db.Timestamptz @default(now())
  expiresAt DateTime @db.Timestamptz @default(now())
  approvedAt DateTime @db.Timestamptz
  @@schema("auth")
  @@map("oauth_authorizations")
}
model OauthClients {
  id String @default(uuid()) @id
  clientSecretHash String
  registrationType String @default("")
  redirectUris String @default("")
  grantTypes String @default("")
  clientName String
  clientUri String
  logoUri String
  createdAt DateTime @db.Timestamptz @default(now())
  updatedAt DateTime @db.Timestamptz @default(now())
  deletedAt DateTime @db.Timestamptz
  clientType String @default("confidential'::auth.oauth_client_type")
  @@schema("auth")
  @@map("oauth_clients")
}
model OauthConsents {
  id String @default(uuid()) @id
  userId String @default(uuid())
  clientId String @default(uuid())
  scopes String @default("")
  grantedAt DateTime @db.Timestamptz @default(now())
  revokedAt DateTime @db.Timestamptz
  @@schema("auth")
  @@map("oauth_consents")
}
model OneTimeTokens {
  id String @default(uuid()) @id
  userId String @default(uuid())
  tokenType String @default("")
  tokenHash String @default("")
  relatesTo String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@schema("auth")
  @@map("one_time_tokens")
}
model RefreshTokens {
  instanceId String @default(uuid())
  id BigInt @id @default(autoincrement())
  token String
  userId String
  revoked Boolean
  createdAt DateTime @db.Timestamptz
  updatedAt DateTime @db.Timestamptz
  parent String
  sessionId String @default(uuid())
  @@schema("auth")
  @@map("refresh_tokens")
}
model SamlProviders {
  id String @default(uuid()) @id
  ssoProviderId String @default(uuid())
  entityId String @default("")
  metadataXml String @default("")
  metadataUrl String
  attributeMapping Json
  createdAt DateTime @db.Timestamptz
  updatedAt DateTime @db.Timestamptz
  nameIdFormat String
  @@schema("auth")
  @@map("saml_providers")
}
model SamlRelayStates {
  id String @default(uuid()) @id
  ssoProviderId String @default(uuid())
  requestId String @default("")
  forEmail String
  redirectTo String
  createdAt DateTime @db.Timestamptz
  updatedAt DateTime @db.Timestamptz
  flowStateId String @default(uuid())
  @@schema("auth")
  @@map("saml_relay_states")
}
model SchemaMigrations {
  version String @default("")
  @@schema("auth")
  @@map("schema_migrations")
}
model Sessions {
  id String @default(uuid()) @id
  userId String @default(uuid())
  createdAt DateTime @db.Timestamptz
  updatedAt DateTime @db.Timestamptz
  factorId String @default(uuid())
  aal String
  notAfter DateTime @db.Timestamptz
  refreshedAt DateTime
  userAgent String
  ip String
  tag String
  oauthClientId String @default(uuid())
  @@schema("auth")
  @@map("sessions")
}
model SsoDomains {
  id String @default(uuid()) @id
  ssoProviderId String @default(uuid())
  domain String @default("")
  createdAt DateTime @db.Timestamptz
  updatedAt DateTime @db.Timestamptz
  @@schema("auth")
  @@map("sso_domains")
}
model SsoProviders {
  id String @default(uuid()) @id
  resourceId String
  createdAt DateTime @db.Timestamptz
model Users {
  instanceId String @default(uuid())
  id String @default(uuid()) @id
  aud String
  role String
  email String
  encryptedPassword String
  emailConfirmedAt DateTime @db.Timestamptz
  invitedAt DateTime @db.Timestamptz
  confirmationToken String
  confirmationSentAt DateTime @db.Timestamptz
  recoveryToken String
  recoverySentAt DateTime @db.Timestamptz
  emailChangeTokenNew String
  emailChange String
  emailChangeSentAt DateTime @db.Timestamptz
  lastSignInAt DateTime @db.Timestamptz
  rawAppMetaData Json
  rawUserMetaData Json
  isSuperAdmin Boolean
  createdAt DateTime @db.Timestamptz
  updatedAt DateTime @db.Timestamptz
  phone String
  phoneConfirmedAt DateTime @db.Timestamptz
  phoneChange String @default("'::character varying")
  phoneChangeToken String @default("'::character varying")
  phoneChangeSentAt DateTime @db.Timestamptz
  confirmedAt DateTime @db.Timestamptz
  emailChangeTokenCurrent String @default("'::character varying")
  emailChangeConfirmStatus Int @default(0)
  bannedUntil DateTime @db.Timestamptz
  reauthenticationToken String @default("'::character varying")
  reauthenticationSentAt DateTime @db.Timestamptz
  isSsoUser Boolean @default(false)
  deletedAt DateTime @db.Timestamptz
  isAnonymous Boolean @default(false)
  @@schema("auth")
  @@map("users")
}
